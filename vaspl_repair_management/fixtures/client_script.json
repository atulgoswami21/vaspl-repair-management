[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Demo customer Feedback",
  "enabled": 0,
  "modified": "2023-01-03 17:55:26.565961",
  "module": "CRM",
  "name": "Custom buttons",
  "script": "frm.add_custom_button('click me',() => {\r\n \r\n\tfrapee.msgprint(__('You ckicked'));\r\n\t\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 0,
  "modified": "2023-03-22 13:11:40.636200",
  "module": null,
  "name": "Repair note custom button",
  "script": "frappe.ui.form.on('Repair Note 1', {\n\trefresh(frm) {\n\t     \n\n\tfrm.add_custom_button(__('Sales Order'), function(){\n\t    frappe.set_route(\"app\", \"sales-order\", \"new-sales-order\");\n\t   //frappe.msgprint(frm.doc.email);\n    }, __(\"Sales Order Generate\")).css({'background-color':'#328fd3','color':'white'});\n    \n    \n\n    \n\n //\tfrm.add_custom_button(__('Generate Document'),\n//cur_frm.cscript['generate_document'], \"icon-exclamation\", \"btn-default\");\n\n    \n  //frm.add_custom_button(__(\"New\")).addClass(\"btn-warning\").css({'color':'white','background-color':'blue','font-weight': 'bold'}),function(){\n   //frappe.set_route(\"app\", \"sales-order\", \"new-sales-order\");   \n  //};\n    \n   // var set_css = function(frm){\n     //  addClass(\"btn-warning\").css({'color':'green','font-weight': 'bold'});\n        \n    //}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "RN Work Order",
  "enabled": 1,
  "modified": "2023-01-09 12:50:12.710873",
  "module": null,
  "name": "RN workorder custom button",
  "script": "frappe.ui.form.on('RN Work Order', {\n\trefresh(frm) {\n    \tfrm.add_custom_button(__('WO Job Card'), function(){\n    \t     frappe.set_route(\"app\", \"rn-job-card\", \"new-rn-job-card\")\n        //frappe.msgprint(frm.doc.email);\n    }, __(\"JC Issue\"));\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2023-01-16 14:58:48.326722",
  "module": null,
  "name": "address fetch in sales invoice",
  "script": "frappe.ui.form.on(\"Sales Invoice\", \"new_address\", function(frm, cdt, cdn) {\r\n    if(frm.doc.new_address){\r\n     return frm.call({\r\n      method: \"frappe.contacts.doctype.address.address.get_address_display\",\r\n      args: {\r\n        \"address_dict\": frm.doc.new_address\r\n      },\r\n      callback: function(r) {\r\n       if(r.message)\r\n           frm.set_value(\"full_address\", r.message);\r\n        \r\n      }\r\n        });\r\n    }\r\n    else{\r\n        frm.set_value(\"full_address\", \"\");\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2023-01-16 15:47:44.957225",
  "module": null,
  "name": "fetch value from customer in sales invoice",
  "script": "cur_frm.add_fetch('customer','vat_id','vat_id')",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-03-06 11:53:16.524073",
  "module": null,
  "name": "fetch value of party gdn details",
  "script": "cur_frm.add_fetch('repair_note','party_gdn_details','party_gdn_details');\ncur_frm.add_fetch('repair_note','party_name','customer');\ncur_frm.add_fetch('repair_note','repair_order_ext_detail','repair_order_ext');\ncur_frm.add_fetch('repair_note','repair_order_ext_date','ro_ext_date');\ncur_frm.add_fetch('repair_note','rn_no','rn_no');\n\n\n\n//frappe.ui.form.on(\"Sales Order\",{\n    \n  //  \"repair_note\": function(frm) {\n        \n    //    repair_note.css({'color':'red'});\n    //}\n//});\n\n\n\n\n//frappe.ui.form.on(\"Sales Order\", {\n\n    \n//\"repair_note\": function(frm) {\n  \n\t\n  //      frappe.model.with_doc(\"Repair Note 1\", frm.doc.repair_note, function() {\n\t\t\n    //        $.each(Repair_Note_1.Child_of_Repair_Note, function(index, row) {\n\t\t\t\n      //          d = frm.add_child(\"Child of repair note on sales order\");\n\t\t\t\t\n        //        d.partno = row.party_name;\n\t\t\t\t\n                //d.item_name__description = row.targetfieldb\n\t\t\t\t\n          //      cur_frm.refresh_field(\"Child of repair note on sales order\");\n\t\t\t\t\n        //    });\n    //    });\n//    }\n//});\n\n\n\nfrappe.ui.form.on('Sales Order', {\nrepair_note: function(frm){\n\t    console.log(frm);\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 1,
  "modified": "2023-01-16 17:31:31.224598",
  "module": null,
  "name": "trigger event",
  "script": "frappe.ui.form.on('Repair Note 1', {\n\tparty_name: function(frm){\n\t    console.log(frm)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 1,
  "modified": "2023-01-18 10:32:51.838541",
  "module": null,
  "name": "Repair Note Submit",
  "script": "frappe.ui.form.on(\"Repair Note 1\", {\n\n\tstatus: function(frm){\n\t\tpopup(frm);\n\t}\n});\n\nvar popup = function(frm) \n{\n\n\tif(frm.doc.status == \"Submitted\")\n\t{\n            frappe.confirm(\n                'Are you sure you want to cancel this form? After you click on <b>cancel</b>, you will not be able to change the data.',\n                function(frm){\n\t\t\tcur_frm.save();\n                },\n                function(frm){\n                    window.close();\n                }\n\t    );\n\t}\n};",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CA Form",
  "enabled": 0,
  "modified": "2023-01-24 15:31:54.353114",
  "module": null,
  "name": "CA form serial no fetch",
  "script": "frappe.ui.form.on(\"Child of CA Form 1\", {\r\n    \"repair_note\": function(frm) {\r\n        frappe.model.with_doc(\"Child of Repair Note\", frm.doc.trigger, function() {\r\n            $.each(repair_note_1.SourceTable, function(index, row) {\r\n                d = frm.add_child(\"ca_form\");\r\n                d.serial_no = row.serial_no;\r\n               // d.sourcefield2 = row.targetfieldb;\r\n                cur_frm.refresh_field(\"CA Form\");\r\n            });\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Beyond Economic Repair",
  "enabled": 1,
  "modified": "2023-03-13 12:25:50.517465",
  "module": null,
  "name": "BER Fetch form repair note",
  "script": "frappe.ui.form.on('Beyond Economic Repair', {\n   rn_no : function(frm){\n       if (frm.doc.rn_no){\n           frm.clear_table('ber');\n           frappe.model.with_doc('Repair Note 1', frm.doc.ber,function(){\n               let source_doc = frappe.model.get_doc('Repair Note 1', frm.doc.ber);\n               $.each(source_doc.repair_note_table, function(index,source_row){\n                   var addchild = cur_frm.add_child('ber');\n                   addchild.part_no = source_row.partno;\n               });\n           });\n       }\n   }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Safety Feedback",
  "enabled": 0,
  "modified": "2023-02-14 11:05:56.763312",
  "module": null,
  "name": "filter option in select field",
  "script": "frappe.ui.form.on(\"Safety Feedback\", \"state\", function(frm) {\r\n  if(frm.doc.state == \"Karnataka\")\r\n  {\r\n    set_field_options(\"city\", [\"Bangalore\",\"Mysore\"])\r\n  }\r\n  else if(frm.doc.state == \"Maharashtra\")\r\n  {\r\n    set_field_options(\"city\", [\"Mumbai\",\"Pune\"])\r\n  }\r\n  else if(frm.doc.state == \"\")\r\n  {\r\n    set_field_options(\"city\", [\"\",\"Bangalore\",\"Mysore\",\"Mumbai\",\"Pune\"])\r\n  }\r\n  });\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 0,
  "modified": "2023-02-15 12:26:44.562854",
  "module": null,
  "name": "New button in file",
  "script": "//frappe.ui.form.on('File', {\r\n//\trefresh(frm) {\r\n\t     \r\n\r\n//\tfrm.add_custom_button(__('Sales Order'), function(){\r\n//\t    frappe.set_route(\"app\", \"file?folder=Home#\");\r\n\t   //frappe.msgprint(frm.doc.email);\r\n   // }, __(\"Sales Order Generate\")).css({'background-color':'#328fd3','color':'white'});\r\n   //  console.log(frm);\r\n    \r\n//\t}\r\n//});\r\n\r\n\r\n\r\nfrappe.ui.form.on(\"File\", {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(__('New Folder'), function() {\r\n              frm.trigger('New Folder');\r\n              //frm.save('Submit');\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Safety Audit",
  "enabled": 1,
  "modified": "2023-02-21 12:38:44.562347",
  "module": null,
  "name": "custom notification",
  "script": "frappe.ui.form.on('Safety Audit', {\n\nafter_save:function(frm){\n    frappe.msgprint({\n        title:__(\"Notification\"),\n        indicator:'blue',\n        message:__('Safety Audit Created')\n    })\n}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 1,
  "modified": "2023-03-22 13:11:30.227453",
  "module": null,
  "name": "Custom Notification for Repair Note 1",
  "script": "frappe.ui.form.on('Repair Note 1', {\n\non_submit:function(frm){\n    //console.log(frm.doc);\n    frappe.msgprint({\n        title:__(\"Notification\"),\n        indicator:'blue',\n        message:__('Repair Note Created for {0}',[frm.doc.party_name])      \n    });\n}\n\n//on_submit: function(frm) {\n\n//frappe.msgprint(\"Repair note Ceated successfully\",[frm.doc.party_name]);\n\n//}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Safety Audit",
  "enabled": 0,
  "modified": "2023-02-22 12:01:19.834949",
  "module": null,
  "name": "Naming series",
  "script": "frappe.ui.form.on('Safety Audit', {\r\n    onload: function(frm) {\r\n        frm.set_naming_series_options({\r\n           \"WOR-\": \"WOR-\",\r\n            \"PWOR-\": \"PWOR-\"\r\n        });\r\n    }\r\n});\r\n\r\n\r\n//frappe.ui.form.on('Safety Audit', {\r\n  //  onload: function(frm) {\r\n//        frm.set_value('naming_series', 'WOR-.YYYY.-');\r\n  //  }\r\n//});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Safety Meeting",
  "enabled": 0,
  "modified": "2023-02-23 14:42:16.295583",
  "module": null,
  "name": "Child table trigger",
  "script": "frappe.ui.form.on('Child of Safety Meeting', {\n\t\n//item_name: function(frm){                                // item_name is child table name field\n  //  frappe.msgprint(\"Trigger event\")\n//}\n\nitem_name(frm, cdt, cdn) {\n    \n    frappe.msgprint(\"Trigger event\");\n}\n});\n\n\n// we can use both the events to trigger",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 2",
  "enabled": 1,
  "modified": "2023-03-09 14:55:25.357516",
  "module": null,
  "name": "fetch child table",
  "script": "frappe.ui.form.on(\"Repair Note 2\", {\n    \n    \"name1\": function(frm) {\n         //console.log(frm.doc.name1);\n            if(frm.doc.name1){\n                frappe.model.with_doc(\"fetch child table doc\", frm.doc.name1, function() {\n                   \n                        var tabletransfer= frappe.model.get_doc(\"fetch child table doc\", frm.doc.name1);\n                      //  console.log(tabletransfer);\n                        $.each(tabletransfer.table_2, function(index, row){\n                            var d = frm.add_child(\"operation_table\");\n                            d.operations = row.operations;\n                            d.workstation_type = row.workstation_type;\n                            d.operations_time = row.operations_time;\n                            frm.refresh_field(\"operation_table\");\n                            \n                        });\n                    \n                });\n            }else{\n                frm.clear_table(\"operation_table\");\n                frm.refresh_field(\"operation_table\");\n            }\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COVERS  DETAILS",
  "enabled": 1,
  "modified": "2023-02-28 14:44:26.350763",
  "module": null,
  "name": "Cover details to fetch child table",
  "script": "frappe.ui.form.on(\"COVERS  DETAILS\", {\n    \n    \"routing\": function(frm) {\n        \n        frm.clear_table(\"operations_table\");\n        frm.refresh_field(\"operations_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.routing){\n                \n                frappe.model.with_doc(\"Routing\", frm.doc.routing, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Routing\", frm.doc.routing);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.operations, function(index, row){\n                            var d = frm.add_child(\"operations_table\");\n                            d.operation = row.operation;\n                            d.workstation_type = row.workstation_type;\n                            d.workstation = row.workstation;\n                            d.fixed_time = row.fixed_time;\n                            d.operating_cost = row.operating_cost;\n                            \n                            frm.refresh_field(\"operations_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"operations_table\");\n                frm.refresh_field(\"operations_table\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CARPET  DETAILS",
  "enabled": 1,
  "modified": "2023-02-28 11:38:24.927846",
  "module": null,
  "name": "Carpet details to fetch child table",
  "script": "frappe.ui.form.on(\"CARPET  DETAILS\", {\n    \n    \"routing\": function(frm) {\n        frm.clear_table(\"operations_table\");\n        frm.refresh_field(\"operations_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.routing){\n                \n                frappe.model.with_doc(\"Routing\", frm.doc.routing, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Routing\", frm.doc.routing);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.operations, function(index, row){\n                            var d = frm.add_child(\"operations_table\");\n                            d.operation = row.operation;\n                            d.workstation_type = row.workstation_type;\n                            d.workstation = row.workstation;\n                            d.fixed_time = row.fixed_time;\n                            d.operating_cost = row.operating_cost;\n                            frm.refresh_field(\"operations_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"operations_table\");\n                frm.refresh_field(\"operations_table\");\n            }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CARPET  DETAILS",
  "enabled": 1,
  "modified": "2023-02-28 12:21:24.519667",
  "module": null,
  "name": "Routing fetch from BOM in Carpet Details",
  "script": "cur_frm.add_fetch('bom','routing','routing')",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COVERS  DETAILS",
  "enabled": 1,
  "modified": "2023-02-28 14:44:33.064322",
  "module": null,
  "name": "Routing fetch from BOM in Cover Details",
  "script": "cur_frm.add_fetch('bom','routing','routing')",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DECALS  DETAILS",
  "enabled": 1,
  "modified": "2023-02-28 15:03:12.648540",
  "module": null,
  "name": "Decals details to fetch child table",
  "script": "frappe.ui.form.on(\"DECALS  DETAILS\", {\n    \n    \"routing\": function(frm) {\n        \n        frm.clear_table(\"operations_table\");\n        frm.refresh_field(\"operations_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.routing){\n                \n                frappe.model.with_doc(\"Routing\", frm.doc.routing, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Routing\", frm.doc.routing);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.operations, function(index, row){\n                            var d = frm.add_child(\"operations_table\");\n                            d.operation = row.operation;\n                            d.workstation_type = row.workstation_type;\n                            d.workstation = row.workstation;\n                            d.fixed_time = row.fixed_time;\n                            d.operating_cost = row.operating_cost;\n                            \n                            frm.refresh_field(\"operations_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"operations_table\");\n                frm.refresh_field(\"operations_table\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "DECALS  DETAILS",
  "enabled": 1,
  "modified": "2023-02-28 15:04:24.402248",
  "module": null,
  "name": "Routing fetch from BOM in Decals Details",
  "script": "cur_frm.add_fetch('bom','routing','routing')",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COMPOSITE AND METALS  DETAILS",
  "enabled": 1,
  "modified": "2023-02-28 15:08:28.842632",
  "module": null,
  "name": "Routing fetch from BOM in Composition and Metals Details",
  "script": "cur_frm.add_fetch('bom','routing','routing')",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "COMPOSITE AND METALS  DETAILS",
  "enabled": 1,
  "modified": "2023-02-28 15:10:20.217553",
  "module": null,
  "name": "Composition and Metals details to fetch child table",
  "script": "frappe.ui.form.on(\"COMPOSITE AND METALS  DETAILS\", {\n    \n    \"routing\": function(frm) {\n        \n        frm.clear_table(\"operations_table\");\n        frm.refresh_field(\"operations_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.routing){\n                \n                frappe.model.with_doc(\"Routing\", frm.doc.routing, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Routing\", frm.doc.routing);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.operations, function(index, row){\n                            var d = frm.add_child(\"operations_table\");\n                            d.operation = row.operation;\n                            d.workstation_type = row.workstation_type;\n                            d.workstation = row.workstation;\n                            d.fixed_time = row.fixed_time;\n                            d.operating_cost = row.operating_cost;\n                            \n                            frm.refresh_field(\"operations_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"operations_table\");\n                frm.refresh_field(\"operations_table\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-03-02 18:10:07.112931",
  "module": null,
  "name": "color on add btn sales order",
  "script": "//frappe.ui.form.on('Sales Order', {\n    //refresh: function(frm) {\n      //   cur_frm.page.set_inner_btn_group_color(__('Add Row'), 'btn-success');\n    //    cur_frm.page.inner_button_group.find('.btn btn-primary btn-sm primary-action').removeClass('btn btn-primary btn-sm primary-action').addClass('btn-success');\n  //  }\n//});\n\n//frappe.ui.form.on('Sales Order', {\n   // refresh: function(frm) {\n  //      cur_frm.page.set_inner_btn_group_color(__('Add Row'), '#00B300 !important');\n  //      cur_frm.page.inner_button_group.find('btn btn-primary btn-sm primary-action').css('background-color', '#00B300 !important');\n  //  }\n//});\nfrappe.ui.form.on('Sales Order', {\n   \n    refresh: function(frm) {\n        cur_frm.page.set_inner_btn_group_color(__('Add Row'), '#00B300 !important');\n        cur_frm.page.inner_button_group.find('.grid-add-row').css('background-color', '#00B300 !ipmortant');\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 1,
  "modified": "2023-03-03 12:33:32.181411",
  "module": null,
  "name": "remove Pdf button",
  "script": "frappe.ui.form.on('Repair Note 1', {\n    refresh(frm) {\n    setTimeout(() => {\n        frm.remove_custom_button('PDF');\n        \n        }, 10);\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TEst for calculation s",
  "enabled": 1,
  "modified": "2023-03-06 15:29:19.290692",
  "module": null,
  "name": "calculation",
  "script": "frappe.ui.form.on(\"calculation child table\", {\n    number_1: function(frm, cdt, cdn) {\n        console.log(\"number_1 field updated\");\n        var child = locals[cdt][cdn];\n        var value1 = child.number_1;\n        var value2 = child.number_2 / 100;\n       // var result = parseInt(value1) * parseInt(value2);\n       var result = value1 * value2\n        frappe.model.set_value(cdt, cdn, \"final_calculation\", result);\n    },\n    number_2: function(frm, cdt, cdn) {\n        console.log(\"number_2 field updated\");\n        var child = locals[cdt][cdn];\n        var value1 = child.number_1;\n        var value2 = child.number_2 / 100;\n       var result = value1 * value2\n       // var result = parseInt(value1) * parseInt(value2);\n        frappe.model.set_value(cdt, cdn, \"final_calculation\", result);\n    },\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-04-19 14:29:25.705042",
  "module": "Repair Management",
  "name": "Quotation",
  "script": "frappe.ui.form.on(\"Quotation\", {\n    validate(frm){\n        frm.trigger('gst_changed_event');\n    },\n    items:function(frm){\n        console.log('Items changed');\n    },\n    gst_changed_event(frm) {\n        setTimeout(function(){\n            var total_gst = 0;\n            var base_total = 0;\n            frm.doc.items.forEach(function(item) {\n                total_gst += item.gst_amount;\n                base_total +=item.net_amount;\n            });\n            frm.set_value('total_gst', total_gst);\n            if(frm.doc.total != base_total){\n              frm.set_value('total', base_total);\n            }\n            if(frm.doc.total_qty != frm.doc.items.length){\n              frm.set_value('total_qty',frm.doc.items.length);\n            }//frm.trigger('gst_changed_event');\n            \n            \n            frm.set_value(\"grand_total\", base_total + total_gst);\n            var amountWithGst=Math.round(((base_total + total_gst)*100)/100);\n            frm.set_value(\"grand_total_with_gst\", amountWithGst);\n            //var amount = frm.doc.grand_total_with_gst\n            var inWords = InWords(amountWithGst);\n            frm.set_value('in_words_gst', inWords);\n        }, 500)\n        \n    },\n    /*total_gst: function(frm) {\n        frm.trigger('gst_changed_event');\n    }/*\n    //,\n    /*:function(frm) {\n    // EVENT LISTENERS\n        if (frm.event_listeners_set !== true) {\n            \n            new MutationObserver(() => {\n                console.debug(\"MutationObserver: Total changed\");\n                frm.trigger('total');\n            }).observe(getElement('total'), { childList: true, subtree: true });\n            \n            frm.event_listeners_set = true;\n        }*/\n    \n//},\n    /*total_gst: function(frm) {\n        frm.set_value(\"grand_total\", frm.doc.total + frm.doc.total_gst);\n        frm.set_value(\"grand_total_with_gst\", Math.floor(((frm.doc.total + frm.doc.total_gst)*100)/100));\n    },\n    grand_total_with_gst: function(frm) {\n        var amount = frm.doc.grand_total_with_gst;\n        var inWords = InWords(amount);\n        frm.set_value('in_words_gst', inWords);\n    }*/\n});\n\nfrappe.ui.form.on(\"Quotation Item\", {\n    items_remove(frm, cdt, cdn) {\n         frm.trigger('gst_changed_event');\n    },\n    refresh(frm) {\n        console.log('child table changed');\n    },\n    qty: function(frm, cdt, cdn) {\n        calculateGst(frm,cdt,cdn);\n    },\n    item_code:function(frm,cdt,cdn){\n        calculateGst(frm,cdt,cdn);\n    },\n    rate:function(frm,cdt,cdn){\n        calculateGst(frm,cdt,cdn);\n    },\n    discount_amount:function(frm, cdt, cdn) {\n        calculateGst(frm,cdt,cdn,true);\n    },\n    gst: function(frm, cdt, cdn) {\n      calculateGst(frm,cdt,cdn);\n        \n    },\n    \n    //gst_amount: function(frm, cdt, cdn) {\n    //    var total_gst = 0;\n    //    frm.doc.items.forEach(function(item) {\n    //      total_gst += item.gst_amount;\n    //    });\n    //    frm.set_value('total_gst', total_gst);\n    //    frm.trigger('gst_changed_event');\n    //    //frm.trigger('gst_changed_event');\n    //    \n    //},\n   \n    \n    \n});\n\n\nfunction calculateGst(frm, cdt, cdn,isDisc){\n     setTimeout(function(){\n        //frm.set_value('total_gst', 0);\n        var child = locals[cdt][cdn];\n        var qty = child.qty||0;\n        var amount = child.base_rate||0;\n        if(isDisc && child.price_list_rate>0){\n            //need to get the updated value based on discount and qty.\n            //var qty = child.qty;\n            var price = child.price_list_rate;\n            amount= price-child.discount_amount;\n        }\n        var gstper = (child.gst||0) / 100;\n        var gst = Math.floor(((amount*qty* gstper)*100)/100);\n       // var result = parseInt(value1) * parseInt(value2);\n        frappe.model.set_value(cdt, cdn, \"total_with_gst\", (amount*qty)+gst);\n        frappe.model.set_value(cdt, cdn, \"gst_amount\", gst);\n        frm.trigger('gst_changed_event');\n        //if(gst==0){\n        //    frappe.model.set_value(cdt, cdn, \"gst\", 0);\n        //}\n     },500);\n}\nfunction InWords(price) {\n    var sglDigit = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n    dblDigit = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"],\n    tensPlace = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"],\n    handle_tens = function(dgt, prevDgt) {\n      return 0 == dgt ? \"\" : \" \" + (1 == dgt ? dblDigit[prevDgt] : tensPlace[dgt])\n    },\n    handle_utlc = function(dgt, nxtDgt, denom) {\n      return (0 != dgt && 1 != nxtDgt ? \" \" + sglDigit[dgt] : \"\") + (0 != nxtDgt || dgt > 0 ? \" \" + denom : \"\")\n    };\n\n  var str = \"\",\n    digitIdx = 0,\n    digit = 0,\n    nxtDigit = 0,\n    words = [];\n  if (price += \"\", isNaN(parseInt(price))) str = \"\";\n  else if (parseInt(price) > 0 && price.length <= 10) {\n    for (digitIdx = price.length - 1; digitIdx >= 0; digitIdx--) switch (digit = price[digitIdx] - 0, nxtDigit = digitIdx > 0 ? price[digitIdx - 1] - 0 : 0, price.length - digitIdx - 1) {\n      case 0:\n        words.push(handle_utlc(digit, nxtDigit, \"\"));\n        break;\n      case 1:\n        words.push(handle_tens(digit, price[digitIdx + 1]));\n        break;\n      case 2:\n        words.push(0 != digit ? \" \" + sglDigit[digit] + \" Hundred\" + (0 != price[digitIdx + 1] && 0 != price[digitIdx + 2] ? \" and\" : \"\") : \"\");\n        break;\n      case 3:\n        words.push(handle_utlc(digit, nxtDigit, \"Thousand\"));\n        break;\n      case 4:\n        words.push(handle_tens(digit, price[digitIdx + 1]));\n        break;\n      case 5:\n        words.push(handle_utlc(digit, nxtDigit, \"Lakh\"));\n        break;\n      case 6:\n        words.push(handle_tens(digit, price[digitIdx + 1]));\n        break;\n      case 7:\n        words.push(handle_utlc(digit, nxtDigit, \"Crore\"));\n        break;\n      case 8:\n        words.push(handle_tens(digit, price[digitIdx + 1]));\n        break;\n      case 9:\n        words.push(0 != digit ? \" \" + sglDigit[digit] + \" Hundred\" + (0 != price[digitIdx + 1] || 0 != price[digitIdx + 2] ? \" and\" : \" Crore\") : \"\" )\n    }\n    str = words.reverse().join(\"\")\n  } else str = \"\";\n  return str.length>0? str + \" Only\":\"\";\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2023-04-13 15:13:10.136337",
  "module": null,
  "name": "total amount calculation in Quotation",
  "script": "frappe.ui.form.on('Quotation Item', {\n  gst_amount: function(frm, cdt, cdn) {\n    var total_gst = 0;\n    frm.doc.items.forEach(function(item) {\n      total_gst += item.gst_amount;\n    });\n    frm.set_value('total_gst', total_gst);\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2023-04-13 15:13:10.589744",
  "module": null,
  "name": "Calclate grand Total In Quotation",
  "script": "frappe.ui.form.on(\"Quotation\", {\n    total: function(frm) {\n        frm.set_value(\"grand_total_with_gst\", frm.doc.total + frm.doc.total_gst);\n    },\n    total_gst: function(frm) {\n        frm.set_value(\"grand_total_with_gst\", frm.doc.total + frm.doc.total_gst);\n    },\n     \n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2023-04-13 15:13:10.264558",
  "module": null,
  "name": "Grand Total existing update",
  "script": "frappe.ui.form.on(\"Quotation\", {\n    total: function(frm) {\n        frm.set_value(\"grand_total\", frm.doc.total + frm.doc.total_gst);\n    },\n    total_gst: function(frm) {\n        frm.set_value(\"grand_total\", frm.doc.total + frm.doc.total_gst);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2023-04-13 15:13:10.345501",
  "module": null,
  "name": "grand total with GST in words",
  "script": "//frappe.ui.form.on('Quotation', {\n   // grand_total_with_gst: function(frm) {\n     //   console.log(\"Grand Total with GST changed\");\n   //     console.log(\"Amount: \", frm.doc.grand_total_with_gst);\n   //     var in_words = Inwords(frm.doc.grand_total_with_gst);\n    // in_words = frappe.utils.money_in_words(frm.doc.grand_total_with_gst);\n  //      console.log(\"In Words: \", in_words);\n       // frm.set_value(\"in_words_gst\", in_words);\n //   }\n//});\n\n\n\nfrappe.ui.form.on('Quotation', {\n    grand_total_with_gst: function(frm) {\n        var amount = frm.doc.grand_total_with_gst;\n        var inWords = InWords(amount);\n        frm.set_value('in_words_gst', inWords);\n    }\n});\n\n\n\nfunction InWords(price) {\n    var sglDigit = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n    dblDigit = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"],\n    tensPlace = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"],\n    handle_tens = function(dgt, prevDgt) {\n      return 0 == dgt ? \"\" : \" \" + (1 == dgt ? dblDigit[prevDgt] : tensPlace[dgt])\n    },\n    handle_utlc = function(dgt, nxtDgt, denom) {\n      return (0 != dgt && 1 != nxtDgt ? \" \" + sglDigit[dgt] : \"\") + (0 != nxtDgt || dgt > 0 ? \" \" + denom : \"\")\n    };\n\n  var str = \"\",\n    digitIdx = 0,\n    digit = 0,\n    nxtDigit = 0,\n    words = [];\n  if (price += \"\", isNaN(parseInt(price))) str = \"\";\n  else if (parseInt(price) > 0 && price.length <= 10) {\n    for (digitIdx = price.length - 1; digitIdx >= 0; digitIdx--) switch (digit = price[digitIdx] - 0, nxtDigit = digitIdx > 0 ? price[digitIdx - 1] - 0 : 0, price.length - digitIdx - 1) {\n      case 0:\n        words.push(handle_utlc(digit, nxtDigit, \"\"));\n        break;\n      case 1:\n        words.push(handle_tens(digit, price[digitIdx + 1]));\n        break;\n      case 2:\n        words.push(0 != digit ? \" \" + sglDigit[digit] + \" Hundred\" + (0 != price[digitIdx + 1] && 0 != price[digitIdx + 2] ? \" and\" : \"\") : \"\");\n        break;\n      case 3:\n        words.push(handle_utlc(digit, nxtDigit, \"Thousand\"));\n        break;\n      case 4:\n        words.push(handle_tens(digit, price[digitIdx + 1]));\n        break;\n      case 5:\n        words.push(handle_utlc(digit, nxtDigit, \"Lakh\"));\n        break;\n      case 6:\n        words.push(handle_tens(digit, price[digitIdx + 1]));\n        break;\n      case 7:\n        words.push(handle_utlc(digit, nxtDigit, \"Crore\"));\n        break;\n      case 8:\n        words.push(handle_tens(digit, price[digitIdx + 1]));\n        break;\n      case 9:\n        words.push(0 != digit ? \" \" + sglDigit[digit] + \" Hundred\" + (0 != price[digitIdx + 1] || 0 != price[digitIdx + 2] ? \" and\" : \" Crore\") : \"\" )\n    }\n    str = words.reverse().join(\"\")\n  } else str = \"\";\n  return str + \"Only\"\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-04-27 10:43:42.314805",
  "module": null,
  "name": "Sales Order Item Details from repair Note",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    \n    \"repair_note\": function(frm) {\n        \n        frm.clear_table(\"items\");\n        frm.refresh_field(\"items\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.repair_note){\n                \n                frappe.model.with_doc(\"Repair Note 1\", frm.doc.repair_note, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Repair Note 1\", frm.doc.repair_note);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.repair_note_table, function(index, row){\n                            var d = frm.add_child(\"items\");\n                            d.item_name = row.item_name__description;\n                            d.ro_ext_detail = row.ro_ext_details;\n                            d.qty = row.qty;\n                            d.ro_ext_date = row.ro_ext_date;\n                            d.uom = row.uom;\n                            d.item_code = row.partno.replace('RN-', '');       // to choose product in the child table instead service item\n                          //  d.description = row.description;\n                            frm.refresh_field(\"items\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"items\");\n                frm.refresh_field(\"items\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-04-13 16:03:06.620824",
  "module": null,
  "name": "Fetch quotation items from repair note",
  "script": "frappe.ui.form.on(\"Quotation\", {\n    \n    \"repair_note\": function(frm) {\n        \n        frm.clear_table(\"items\");\n        frm.refresh_field(\"items\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.repair_note){\n                \n                frappe.model.with_doc(\"Repair Note 1\", frm.doc.repair_note, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Repair Note 1\", frm.doc.repair_note);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.repair_note_table, function(index, row){\n                            var d = frm.add_child(\"items\");\n                            d.item_name = row.item_name__description;\n                            d.customer_reference = row.ro_ext_details;\n                            d.qty = row.qty;\n                            d.customer_reference_date = row.ro_ext_date;\n                            d.uom = row.uom;\n                            d.item_code = row.partno.replace('RN-', '');  \n                            d.rate = row.price;\n                            d.serial_or_batch_no = row.serial_no;\n                           \n                            \n                            frm.refresh_field(\"items\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"items\");\n                frm.refresh_field(\"items\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2023-04-13 15:27:41.517700",
  "module": "Repair Management",
  "name": "trigger quotation",
  "script": "debugger;\nfrappe.ui.form.on('Quotation Item', {\n\tqty: function(frm){\n\t        console.log(frm)\n\t    },\n\t    discount: function(frm){\n\t        console.log(frm)\n\t    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-03-14 12:18:58.535214",
  "module": null,
  "name": "VASPL partno Naming series",
  "script": "\nfrappe.ui.form.on('Item', {\n\t//refresh(frm) {\n// console.log(frm);\n\t\t//cur_frm.cscript.custom_validate = function(doc) {\n\t\titem_group : function(frm){\n\t\t    //frm.refresh_field(\"vaspl_part_no_series\");\n    \n    frm.doc.vaspl_part_no = \"\";\n\n    console.log(frm);\n    var series=\"XX\";\n    switch(frm.doc.item_group) {\n        case \"Products\":\n           // doc.vaspl_part_no_series = \"VAS01010101\";\n             series=\"VAS01\";\n             //frm.refresh_field(\"vaspl_part_no_series\");\n            break;\n        case \"Services\":\n            series=\"VAS02\";\n            //frm.doc.vaspl_part_no_series = \"VAS02\";\n             //frm.refresh_field(\"vaspl_part_no_series\");\n            break;\n    }\n    frm.set_value(\"vaspl_part_no_series\", series);\n             var Id=GenerateId(series);\n             frm.set_value(\"vaspl_part_no\", Id);\n//}\n\t}\n\n\t\n});\nfunction GenerateId(initialString, empId = '') {\n    var dateStr = new Date().yyMMddHHmmssfff();\n    var id = initialString +\" - \" + empId + dateStr ;\n    return id;\n    \n}\nObject.defineProperty(Date.prototype, 'yyMMddHHmmssfff', {\n    value: function () {\n        function pad2(n) {  // always returns a string\n            return (n < 10 ? '0' : '') + n;\n        }\n\n        return this.getFullYear().toString().substr(2,2) +\n            pad2(this.getMonth() + 1) +\n            pad2(this.getDate()) +\n            pad2(this.getHours()) +\n            pad2(this.getMinutes()) +\n            pad2(this.getSeconds()) +\n            this.getMilliseconds().toString().substr(0, 3);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-03-13 19:14:34.567619",
  "module": null,
  "name": "Generate a random string on Item (vaspl_part_no)",
  "script": "\nfrappe.ui.form.on('Item', {\n    vaspl_part_no_series: function (frm) {\n        GenerateId(frm.doc.vaspl_part_no);\n    }\n});\n\n   function GenerateId(initialString, empId = '') {\n    var dateStr = new Date().yyMMddHHmmssfff();\n    var id = initialString + empId + dateStr;\n    return id;\n    \n}\nObject.defineProperty(Date.prototype, 'yyMMddHHmmssfff', {\n    value: function () {\n        function pad2(n) {  // always returns a string\n            return (n < 10 ? '0' : '') + n;\n        }\n\n        return this.getFullYear().toString().substr(2,2) +\n            pad2(this.getMonth() + 1) +\n            pad2(this.getDate()) +\n            pad2(this.getHours()) +\n            pad2(this.getMinutes()) +\n            pad2(this.getSeconds()) +\n            this.getMilliseconds().toString().substr(0, 3);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-03-13 18:52:11.642201",
  "module": null,
  "name": "naming series1",
  "script": "//frappe.ui.form.on('Item', {\n  //refresh(frm) {\n //  cur_frm.cscript.custom_validate = function(doc) {\n      //doc.vaspl_part_no = \"\";\n\n     // switch(doc.item_group) {\n     //   case \"Products\":\n      //    doc.vaspl_part_no_series = \"VAS01\";\n       //   frm.set_value(\"vaspl_part_no_series\", \"VAS01\");\n       //   break;\n       // case \"Services\":\n       //   doc.vaspl_part_no_series = \"VAS02\";\n       //   frm.set_value(\"vaspl_part_no_series\", \"VAS02\");\n        //  break;\n       // default:\n       //   doc.vaspl_part_no_series = \"XX\";\n       //   frm.set_value(\"vaspl_part_no_series\", \"XX\");\n     // }\n      \n    //  frm.refresh_field(\"vaspl_part_no_series\");\n   // }\n  //}\n//}///);\n\nfrappe.ui.form.on('Item', 'item_group', function(frm) {\n    switch(doc.item_group) {\n        case \"Products\":\n          doc.vaspl_part_no_series = \"VAS01\";\n          frm.set_value(\"vaspl_part_no_series\", \"VAS01\");\n          break;\n    }\n  frm.trigger('refresh');\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-03-20 12:20:45.583100",
  "module": null,
  "name": "unique id in item",
  "script": "\nfrappe.ui.form.on('Item', 'item_group',  function(frm){\n\t\t    \n    frm.doc.vaspl_part_no = \"\";\n\n    \n    var series=\"XX\";\n    switch(frm.doc.item_group) {\n        case \"Products\":\n           // doc.vaspl_part_no_series = \"VAS01010101\";\n             series=\"VAS01\";\n             //frm.refresh_field(\"vaspl_part_no_series\");\n            break;\n            \n        case \"Services\":\n            series=\"VAS02\";\n            //frm.doc.vaspl_part_no_series = \"VAS02\";\n             //frm.refresh_field(\"vaspl_part_no_series\");\n            break;\n            \n            case \"MOONMAT & FLOORMAT\":\n            series=\"VAC01\";\n            break;\n            \n            case \"LEATHER\":\n            series=\"VAC02\";\n            break;\n             \n            case \"FABRIC\":\n            series=\"VAC03\";\n            break;\n            \n            case \"PVC\":\n            series=\"VAC04\";\n            break;\n            \n            case \"MISCELLENEOUS RAW MATERIAL\":\n            series=\"VAC05\";\n            break;\n            \n            case \"CARPET\":\n            series=\"VAC06\";\n            break;\n            \n            case \"CARPET ASSY\":\n            series=\"VAC07\";\n            break;\n            \n            case \"seat\":                       //handle upper case and lower case \n            case \"SEAT\":\n            series=\"VAC08\";\n            break;\n            \n            case \"LEATHER SEAT COVERS\":\n            series=\"VAC09\";\n            break;\n            \n            case \"FABRIC SEAT COVER\":\n            series=\"VAC10\";\n            break;\n            \n            case \"FABRIC SEAT COVER\":\n            series=\"VAC10\";\n            break;\n            \n            case \"CURTAINS\":\n            series=\"VAC11\";\n            break;\n            \n            case \"MEDICAL KIT/PRODUCT\":\n            series=\"VAC12\";\n            break;\n            \n            case \"UPHOLESTRY PANELS\":\n            series=\"VAC13\";\n            break;\n            \n            case \"UPHOLESTRY PANELS\":\n            series=\"VAC13\";\n            break;\n            \n            case \"PLASTIC PANELS\":\n            series=\"VAC14\";\n            break;\n            \n            case \"METAL PARTS\":\n            series=\"VAC15\";\n            break;\n            \n            case \"BLANKINGS\":\n            series=\"VAC16\";\n            break;\n            \n            case \"SAFETY NET\":\n            series=\"VAC18\";\n            break;\n            \n            case \"DECALS & PLACARD\":\n            series=\"VAC19\";\n            break;\n            \n            case \"VENEER/WOOD WORK\":\n            series=\"VAC20\";\n            break;\n            \n            case \"VENEER/WOOD WORK\":\n            series=\"VAC20\";\n            break;\n            \n            case \"LABELS\":\n            series=\"VAC21\";\n            break;\n            \n            case \"ROOMS\":\n            series=\"VAC22\";\n            break;\n            \n            case \"STORAGE FIXTURES\":\n            series=\"VAC23\";\n            break;\n            \n            case \"TOOLS\":\n            series=\"VAC24\";\n            break;\n            \n            case \"MACHINES\":\n            series=\"VAC25\";\n            break;\n            \n            case \"COMPUTER DEVICES & EQUIPMENT\":\n            series=\"VAC26\";\n            break;\n    }\n    frm.set_value(\"vaspl_part_no_series\", series);\n           var Id=GenerateId(series);\n           frm.set_value(\"vaspl_part_no\", Id);\n//}\n\t\n\n\t\n});\n\n\n//1st code\n//let counter = \"\";\n//function generateUniqueCode(series) {\n  //return `${prefix} - CODE_${++counter}`; // generates a unique code like 'CODE_1', 'CODE_2', etc.\n  //return `${series}-0000${++counter}`;\n//}\n\n\n//2nd code\n//let counter = 0;\n//let lastSeries = '';\n\n//function GenerateId(series) {\n // if (lastSeries !== series) {\n //   counter = 0;\n  //  lastSeries = series;\n // }\n // return `${series}-0000${++counter}`;\n//}\n\n\n//3th code\n\nconst seriesCounters = {};\n\nfunction GenerateId(series) {\n  if (!seriesCounters[series]) {\n    seriesCounters[series] = 0;\n  }\n  const counter = ++seriesCounters[series];\n  const paddedCounter = counter.toString().padStart(4, '0');\n  return `${series}-${paddedCounter}`;}\n\n//function GenerateId(initialString, empId = '') {\n  //  var dateStr = new Date().yyMMddHHmmssfff();\n   // var id = initialString +\"-\" + empId + dateStr ;\n   // return id;\n    \n//}\n//Object.defineProperty(Date.prototype, 'yyMMddHHmmssfff', {\n    //value: function () {\n   //     function pad2(n) {  // always returns a string\n        //    return (n < 10 ? '0' : '') + n;\n      // }\n\n       // return this.getFullYear().toString().substr(2,2) +\n          //  pad2(this.getMonth() + 1) +\n          //  pad2(this.getDate()) +\n         //   pad2(this.getHours()) +\n        //    pad2(this.getMinutes()) +\n        //    pad2(this.getSeconds()) +\n        //    this.getMilliseconds().toString().substr(0, 3);\n    //}\n    \n//});\n\n// Fetch RD part no in Item when select Vaspl part no //\ncur_frm.add_fetch('vaspl_part_no','rd_part_no','rd_part_no');\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 0,
  "modified": "2023-03-14 16:53:21.327021",
  "module": null,
  "name": "EMPLOYEE NAME INSTEAD OF ID",
  "script": "frappe.ui.form.on('Repair Note 1', {\n    received_by_name: function(frm) {\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Employee',\n                fields: ['name', 'employee_name'],\n            },\n            callback: function(response) {\n                var options = $.map(response.message, function(item) {\n                    var name_parts = item.employee_name.split(\" \");\n                    var first_name = name_parts[0];\n                    var last_name = name_parts[name_parts.length - 1];\n                    var label = first_name + ' ' + last_name;\n                    return {label: label, value: item.name};\n                });\n                frm.set_df_property('received_by_name', 'options', options);\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-03-15 14:54:13.748374",
  "module": null,
  "name": "unique code using validate function Item doc",
  "script": "frappe.ui.form.on(\"Item\", \"item_group\", {\n    validate: function(frm) {\n        \n        frm.doc.vaspl_part_no = \"\";\n          var series=\"XX\";\n    switch(frm.doc.item_group) {\n        case \"Products\":\n           // doc.vaspl_part_no_series = \"VAS01010101\";\n             series=\"VAS01\";\n             //frm.refresh_field(\"vaspl_part_no_series\");\n            break;\n            \n        case \"Services\":\n            series=\"VAS02\";\n            //frm.doc.vaspl_part_no_series = \"VAS02\";\n             //frm.refresh_field(\"vaspl_part_no_series\");\n            break;\n    }\n    \n        frm.set_value(\"vaspl_part_no_series\", series);\n             var Id=GenerateId(series);\n             frm.set_value(\"vaspl_part_no\", Id);\n             \n             \n             \n             function GenerateId(series) {\n  if (!seriesCounters[series]) {\n    seriesCounters[series] = 0;\n  }\n  const counter = ++seriesCounters[series];\n  const paddedCounter = counter.toString().padStart(4, '0');\n  return `${series}-${paddedCounter}`;\n}\n        \n    },\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "R and D",
  "enabled": 1,
  "modified": "2023-03-15 16:27:16.348731",
  "module": null,
  "name": "R&D Operations fetch from Routing",
  "script": "frappe.ui.form.on(\"R and D\", {\n    \n    \"routing\": function(frm) {\n        \n        frm.clear_table(\"operations_table\");\n        frm.refresh_field(\"operations_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.routing){\n                \n                frappe.model.with_doc(\"Routing\", frm.doc.routing, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Routing\", frm.doc.routing);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.operations, function(index, row){\n                            var d = frm.add_child(\"operations_table\");\n                            d.operation = row.operation;\n                            d.workstation_type = row.workstation_type;\n                            d.workstation = row.workstation;\n                            d.fixed_time = row.fixed_time;\n                            d.operating_cost = row.operating_cost;\n                            \n                            frm.refresh_field(\"operations_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"operations_table\");\n                frm.refresh_field(\"operations_table\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Drawing Link",
  "enabled": 0,
  "modified": "2023-03-16 17:33:04.010760",
  "module": null,
  "name": "Drawing Link fetch from Routing",
  "script": "frappe.ui.form.on(\"Drawing Link\", {\n    \n    \"routing\": function(frm) {\n        \n        frm.clear_table(\"operations_table\");\n        frm.refresh_field(\"operations_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.routing){\n                \n                frappe.model.with_doc(\"Routing\", frm.doc.routing, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Routing\", frm.doc.routing);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.operations, function(index, row){\n                            var d = frm.add_child(\"operations_table\");\n                            d.operation = row.operation;\n                            d.workstation_type = row.workstation_type;\n                            d.workstation = row.workstation;\n                            d.fixed_time = row.fixed_time;\n                            d.operating_cost = row.operating_cost;\n                            \n                            frm.refresh_field(\"operations_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"operations_table\");\n                frm.refresh_field(\"operations_table\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "RD Part No",
  "enabled": 1,
  "modified": "2023-03-16 15:03:59.507350",
  "module": null,
  "name": "VASPL Part No fetch from Routing",
  "script": "frappe.ui.form.on(\"VASPL Part No\", {\n    \n    \"routing\": function(frm) {\n        \n        frm.clear_table(\"operations_table\");\n        frm.refresh_field(\"operations_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.routing){\n                \n                frappe.model.with_doc(\"Routing\", frm.doc.routing, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Routing\", frm.doc.routing);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.operations, function(index, row){\n                            var d = frm.add_child(\"operations_table\");\n                            d.operation = row.operation;\n                            d.workstation_type = row.workstation_type;\n                            d.workstation = row.workstation;\n                            d.fixed_time = row.fixed_time;\n                            d.operating_cost = row.operating_cost;\n                            \n                            frm.refresh_field(\"operations_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"operations_table\");\n                frm.refresh_field(\"operations_table\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "RD Part No",
  "enabled": 1,
  "modified": "2023-03-16 15:48:36.371708",
  "module": null,
  "name": "RD Part Number Operations fetch from Routing",
  "script": "frappe.ui.form.on(\"RD Part No\", {\n    \n    \"routing\": function(frm) {\n        \n        frm.clear_table(\"operations_table\");\n        frm.refresh_field(\"operations_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.routing){\n                \n                frappe.model.with_doc(\"Routing\", frm.doc.routing, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Routing\", frm.doc.routing);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.operations, function(index, row){\n                            var d = frm.add_child(\"operations_table\");\n                            d.operation = row.operation;\n                            d.workstation_type = row.workstation_type;\n                            d.workstation = row.workstation;\n                            d.fixed_time = row.fixed_time;\n                            d.operating_cost = row.operating_cost;\n                            \n                            frm.refresh_field(\"operations_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"operations_table\");\n                frm.refresh_field(\"operations_table\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "VASPL Part No",
  "enabled": 1,
  "modified": "2023-03-16 16:10:31.728301",
  "module": null,
  "name": "ID series for VASPL Part No",
  "script": "frappe.ui.form.on('VASPL Part No', 'item_group',  function(frm){\n\t\t    \n    frm.doc.vaspl_part_no_series = \"\";\n\n    \n    var series=\"XX\";\n    switch(frm.doc.item_group) {\n        case \"Products\":\n           // doc.vaspl_part_no_series = \"VAS01010101\";\n             series=\"VAS01\";\n             //frm.refresh_field(\"vaspl_part_no_series\");\n            break;\n            \n        case \"Services\":\n            series=\"VAS02\";\n            //frm.doc.vaspl_part_no_series = \"VAS02\";\n             //frm.refresh_field(\"vaspl_part_no_series\");\n            break;\n            \n            case \"MOONMAT & FLOORMAT\":\n            series=\"VAC01\";\n            break;\n            \n            case \"LEATHER\":\n            series=\"VAC02\";\n            break;\n             \n            case \"FABRIC\":\n            series=\"VAC03\";\n            break;\n            \n            case \"PVC\":\n            series=\"VAC04\";\n            break;\n            \n            case \"MISCELLENEOUS RAW MATERIAL\":\n            series=\"VAC05\";\n            break;\n            \n            case \"CARPET\":\n            series=\"VAC06\";\n            break;\n            \n            case \"CARPET ASSY\":\n            series=\"VAC07\";\n            break;\n            \n            case \"seat\":                       //handle upper case and lower case \n            case \"SEAT\":\n            series=\"VAC08\";\n            break;\n            \n            case \"LEATHER SEAT COVERS\":\n            series=\"VAC09\";\n            break;\n            \n            case \"FABRIC SEAT COVER\":\n            series=\"VAC10\";\n            break;\n            \n            case \"FABRIC SEAT COVER\":\n            series=\"VAC10\";\n            break;\n            \n            case \"CURTAINS\":\n            series=\"VAC11\";\n            break;\n            \n            case \"MEDICAL KIT/PRODUCT\":\n            series=\"VAC12\";\n            break;\n            \n            case \"UPHOLESTRY PANELS\":\n            series=\"VAC13\";\n            break;\n            \n            case \"UPHOLESTRY PANELS\":\n            series=\"VAC13\";\n            break;\n            \n            case \"PLASTIC PANELS\":\n            series=\"VAC14\";\n            break;\n            \n            case \"METAL PARTS\":\n            series=\"VAC15\";\n            break;\n            \n            case \"BLANKINGS\":\n            series=\"VAC16\";\n            break;\n            \n            case \"SAFETY NET\":\n            series=\"VAC18\";\n            break;\n            \n            case \"DECALS & PLACARD\":\n            series=\"VAC19\";\n            break;\n            \n            case \"VENEER/WOOD WORK\":\n            series=\"VAC20\";\n            break;\n            \n            case \"VENEER/WOOD WORK\":\n            series=\"VAC20\";\n            break;\n            \n            case \"LABELS\":\n            series=\"VAC21\";\n            break;\n            \n            case \"ROOMS\":\n            series=\"VAC22\";\n            break;\n            \n            case \"STORAGE FIXTURES\":\n            series=\"VAC23\";\n            break;\n            \n            case \"TOOLS\":\n            series=\"VAC24\";\n            break;\n            \n            case \"MACHINES\":\n            series=\"VAC25\";\n            break;\n            \n            case \"COMPUTER DEVICES & EQUIPMENT\":\n            series=\"VAC26\";\n            break;\n    }\n    frm.set_value(\"vaspl_part_no_series\", series);\n            // var Id=GenerateId(series);\n            // frm.set_value(\"vaspl_part_no\", Id);\n//}\n\t\n\n\n\n\n\n\n\n});\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Drawing Link",
  "enabled": 1,
  "modified": "2023-03-16 17:30:34.620467",
  "module": null,
  "name": "Drawing Link table fetch from R and D",
  "script": "frappe.ui.form.on(\"Drawing Link\", {\n    \n    \"rd_number\": function(frm) {\n        \n        frm.clear_table(\"r_d_part_no_table\");\n        frm.refresh_field(\"r_d_part_no_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.rd_number){\n                \n                frappe.model.with_doc(\"R and D\", frm.doc.rd_number, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"R and D\", frm.doc.rd_number);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.r_d_part_no_details, function(index, row){\n                            var d = frm.add_child(\"r_d_part_no_table\");\n                            d.r_d_part_no = row.r_d_part_no;\n                            d.bom = row.bom;\n                            d.routing = row.routing;\n                            d.drawing_no = row.drawing_no;\n                            \n                            \n                            \n                            frm.refresh_field(\"r_d_part_no_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"r_d_part_no_table\");\n                frm.refresh_field(\"r_d_part_no_table\");\n            }\n            \n    }\n    \n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2023-03-17 21:24:22.598164",
  "module": null,
  "name": "Fetch RD part no in Item",
  "script": "cur_frm.add_fetch('vaspl_part_no','rd_part_no','rd_part_no');",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2023-03-23 13:40:20.738411",
  "module": null,
  "name": "Update Unique code generation",
  "script": "frappe.ui.form.on('Item', 'item_group', function(frm) {\n    frm.doc.vaspl_part_no = \"\";\n\n    var series = \"XX\";\n    \n     frappe.db.get_value('Item Group',frm.doc.item_group,'vaspl_part_no_series')\n    .then(function(response){\n         \n        series = response.message.vaspl_part_no_series || \"\";\n        frm.set_value(\"vaspl_part_no_series\", series);\n            if(series===\"\"){\n                 frm.set_value(\"vaspl_part_no\", \"\");\n                 frm.refresh_field(\"vaspl_part_no\");\n                // frappe.ui.form.set_value(\"vaspl_part_no\", \"\");\n            }\n            else{\n                GenerateId(series, function(id) {\n                    frm.set_value(\"vaspl_part_no\", id);\n                });                \n            }\n     });\n     /*switch(frm.doc.item_group) {\n       // case \"Products\":\n         //   series = \"VAS01\";\n        //    break;\n       // case \"Services\":\n       //     series = \"VAS02\";\n       //     break;\n             case \"MOONMAT & FLOORMAT\":\n            series=\"VAC01\";\n            break;\n            \n            case \"LEATHER\":\n            series=\"VAC02\";\n            break;\n             \n            case \"FABRIC\":\n            series=\"VAC03\";\n            break;\n            \n            case \"PVC\":\n            series=\"VAC04\";\n            break;\n            \n            case \"MISCELLENEOUS RAW MATERIAL\":\n            series=\"VAC05\";\n            break;\n            \n            case \"CARPET\":\n            series=\"VAC06\";\n            break;\n            \n            case \"CARPET ASSY\":\n            series=\"VAC07\";\n            break;\n            \n            case \"seat\":                       //handle upper case and lower case \n            case \"SEAT\":\n            series=\"VAC08\";\n            break;\n            \n            case \"LEATHER SEAT COVERS\":\n            series=\"VAC09\";\n            break;\n            \n            case \"FABRIC SEAT COVER\":\n            series=\"VAC10\";\n            break;\n            \n            case \"FABRIC SEAT COVER\":\n            series=\"VAC10\";\n            break;\n            \n            case \"CURTAINS\":\n            series=\"VAC11\";\n            break;\n            \n            case \"MEDICAL KIT/PRODUCT\":\n            series=\"VAC12\";\n            break;\n            \n            case \"UPHOLESTRY PANELS\":\n            series=\"VAC13\";\n            break;\n            \n            case \"UPHOLESTRY PANELS\":\n            series=\"VAC13\";\n            break;\n            \n            case \"PLASTIC PANELS\":\n            series=\"VAC14\";\n            break;\n            \n            case \"METAL PARTS\":\n            series=\"VAC15\";\n            break;\n            \n            case \"BLANKINGS\":\n            series=\"VAC16\";\n            break;\n            \n            case \"SAFETY NET\":\n            series=\"VAC18\";\n            break;\n            \n            case \"DECALS & PLACARD\":\n            series=\"VAC19\";\n            break;\n            \n            case \"VENEER/WOOD WORK\":\n            series=\"VAC20\";\n            break;\n            \n            case \"VENEER/WOOD WORK\":\n            series=\"VAC20\";\n            break;\n            \n            case \"LABELS\":\n            series=\"VAC21\";\n            break;\n            \n            case \"ROOMS\":\n            series=\"VAC22\";\n            break;\n            \n            case \"STORAGE FIXTURES\":\n            series=\"VAC23\";\n            break;\n            \n            case \"TOOLS\":\n            series=\"VAC24\";\n            break;\n            \n            case \"MACHINES\":\n            series=\"VAC25\";\n            break;\n            \n            case \"COMPUTER DEVICES & EQUIPMENT\":\n            series=\"VAC26\";\n            break;\n            \n            case \"Products\":\n            series= \"PRO\";\n            break;\n            \n            case\"Services\":\n                series= \"SER\";\n                break;\n    }*/\n\n\n    function GenerateId(series, callback) {\n        var id;\n        frappe.db.get_list('Item', {\n            filters: {\n                vaspl_part_no: ['like', series + '%']\n            },\n            fields: ['vaspl_part_no'],\n            order_by: 'vaspl_part_no desc',\n            limit: 1\n        }).then(function(items) {\n            if (items.length > 0) {\n                //debugger;\n                var last_id = items[0].vaspl_part_no;\n                var last_num = parseInt(last_id.replace(series,\"\"));\n                id = series + pad(last_num + 1, 4);\n            } else {\n                id = series + '0001';\n            }\n            \n         \n            \n            callback(id);\n        });\n    }\n\n    function pad(num, size) {\n        var s = num + \"\";\n        while (s.length < size) s = \"0\" + s;\n        return s;\n    }\n}); ",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2023-03-21 15:53:47.292022",
  "module": null,
  "name": "vaspl drawing link unique code in item doctype",
  "script": "frappe.ui.form.on(\"Item\", {\r\n  item_group: function(frm) {\r\n    const series = frm.doc.item_group;\r\n    generateUniqueCode(uniqueCode => {\r\n      frm.set_value(\"vaspl_drawing_no\", uniqueCode);\r\n    });\r\n  }\r\n});\r\n\r\n\r\n\r\n//let counter = 0;\r\n\r\n//function generateUniqueCode(callback) {\r\n  //const prefix = \"VASPL/ED\";\r\n  //frappe.db.get_list('Item', {\r\n//      filters: {\r\n            //    vaspl_drawing_no: ['like', '${prefix}/%']\r\n          //  },\r\n        //    fields: ['vaspl_drawing_no'],\r\n      //      order_by: 'vaspl_drawing_no desc',\r\n    //        limit: 1\r\n  //}).then(existingItems => {\r\n//    if (existingItems.length > 0) {\r\n      //const lastCode = existingItems[0].vaspl_drawing_no;\r\n      //counter = Number(lastCode.substr(lastCode.length - 5)) + 1;\r\n    //} else {\r\n    //  counter = 1;\r\n  //  }\r\n//    const code = String(counter).padStart(5, '0'); // pads the number with leading zeros up to 5 digits\r\n    //const uniqueCode = `${prefix}/${code}`;\r\n    //callback(uniqueCode);\r\n  //});\r\n//}\r\n\r\nlet counter = 0;\r\nlet promise = Promise.resolve();\r\n\r\nfunction generateUniqueCode(callback) {\r\n  const prefix = \"VASPL/ED\";\r\n  \r\n  // Add the Promise to ensure that the counter is incremented only once for each call\r\n  promise = promise.then(() => {\r\n    return frappe.db.get_list('Item', {\r\n      filters: {\r\n        vaspl_drawing_no: ['like', `${prefix}/%`]\r\n      },\r\n      fields: ['vaspl_drawing_no'],\r\n      order_by: 'vaspl_drawing_no desc',\r\n      limit: 1\r\n    });\r\n  }).then(existingItems => {\r\n    if (existingItems.length > 0) {\r\n      const lastCode = existingItems[0].vaspl_drawing_no;\r\n      counter = Number(lastCode.substr(lastCode.length - 5)) + 1;\r\n    } else {\r\n      counter++;\r\n    }\r\n    const code = String(counter).padStart(5, '0'); // pads the number with leading zeros up to 5 digits\r\n    const uniqueCode = `${prefix}/${code}`;\r\n    callback(uniqueCode);\r\n  });\r\n  //.catch(error => {\r\n    //console.log(error);\r\n  //});\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 0,
  "modified": "2023-03-22 12:54:27.544195",
  "module": null,
  "name": "only service item in repair note 1",
  "script": "frappe.ui.form.on('Repair Note 1', {\n    onload_post_render: function(frm) {                                           // also we can use refresh insted of onload_post_render\n        // get the child table\n        var repair_note_table = frm.fields_dict['repair_note_table'].grid;\n\n        // iterate through each row in the child table\n        repair_note_table.grid_rows.forEach(function(row) {\n            // get the part no field\n            var part_no_field = row.get_field('partno');\n\n            // set the query for the part no field to only show service items\n            part_no_field.get_query = function() {\n                return {\n                    filters: {\n                        \"item_group\": \"Service\"\n                    }\n                }\n            };\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-03-22 16:38:18.168908",
  "module": null,
  "name": "Remove RN",
  "script": "frappe.ui.form.on('Sales Order', {\n    refresh: function(frm) {\n        // fetch the data from the \"Child of Repair Note\" table\n        frappe.call({\n            method: 'get_child_items',\n            doc: frm.doc,\n            callback: function(r) {\n                if (r.message) {\n                    // populate the items in the sales order item table\n                    $.each(r.message, function(i, item) {\n                        var row = frappe.model.add_child(frm.doc, 'Sales Order Item', 'items');\n                        row.item_code = item.item_code.replace('RN-', '');\n                        row.qty = item.qty;\n                        // add other item fields as needed\n                    });\n                    frm.refresh_field('items');\n                }\n            }\n        });\n    }\n});\n\nfunction get_child_items(doc) {\n    return frappe.db.get_list('Child of Repair Note', {\n        fields: ['item_code', 'qty'],\n        filters: {parent: doc.name}\n    });\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 0,
  "modified": "2023-03-23 10:57:22.681853",
  "module": null,
  "name": "Only service iyem in repair note",
  "script": "frappe.ui.form.on(\"Repair Note 1\", \"onload\", function(frm) {\n    frm.fields_dict.repair_note_table.grid.get_field(\"partno\").get_query = function(doc, cdt, cdn) {\n        return {\n            filters: [\n                  [\"Item\", \"item_group\", \"=\", \"Services\"],\n                  \n             //   [\"Item\", \"is_sales_item\", \"=\", 0],                        // for services \n             //   [\"Item\", \"is_stock_item\", \"=\", 1],                        // for product\n             //   [\"Item\", \"is_stock_item\", \"=\", 1],                       // for raw materials use both statement\n             //   [\"Item\", \"is_purchase_item\", \"=\", 1]                     // for raw material use both statement\n            ]\n        };\n    };\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 1,
  "modified": "2023-04-25 11:29:02.145519",
  "module": null,
  "name": "Filter Item Group: Services in Repair Note 1",
  "script": "frappe.ui.form.on(\"Repair Note 1\", \"onload\", function(frm) {\n    frm.fields_dict.repair_note_table.grid.get_field(\"partno\").get_query = function(doc, cdt, cdn) {\n        return {\n            filters: [\n                  [\"Item\", \"item_group\", \"=\", \"Services\"],\n                  \n             //   [\"Item\", \"is_sales_item\", \"=\", 0],                        // for services \n             //   [\"Item\", \"is_stock_item\", \"=\", 1],                        // for product\n             //   [\"Item\", \"is_stock_item\", \"=\", 1],                       // for raw materials use both statement\n             //   [\"Item\", \"is_purchase_item\", \"=\", 1]                     // for raw material use both statement\n            ]\n        };\n    };\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Outward Checklist",
  "enabled": 0,
  "modified": "2023-03-24 15:02:05.075454",
  "module": null,
  "name": "fetch sales order through conection",
  "script": "frappe.ui.form.on('Outward Checklist', {\n    rn_no: function(frm) {\n        if(frm.doc.rn_no){\n        if (frm.doc.rn_no) {\n            frappe.db.get_list('Sales Order', {\n                filters: {\n                    repair_note: ['=', frm.doc.rn_no]\n                }\n            }).then(function(orders) {\n                console.log(orders);\n                orders.forEach(function(order){\n                    \n                    \n                    //fetching sales invoice\n                    frappe.db.get_list('Sales Invoice Item', {\n                        filters: {\n                            sales_order: ['=', order.name]\n                        },\n                        fields: [\"parent\", \"creation\"]\n                    }).then(function(salesinvoices) {\n                        console.log(salesinvoices);\n                        var usalesinvoices=salesinvoices.filter((a,i)=>salesinvoices.findIndex((s)=>a.parent==s.parent)===i);\n                        usalesinvoices.forEach(function(salesinvoice){\n                            var d = frm.add_child(\"sales_invoice_details\");\n                            d.sales_invoice = salesinvoice.parent;\n                            d.date = salesinvoice.creation;\n                            frm.refresh_field(\"sales_invoice_details\");\n                        });\n                        \n                        \n                        \n                    \n                        //fetching delivery note\n                        frappe.db.get_list('Delivery Note Item', {\n                            filters: {\n                                against_sales_order: ['=', order.name]\n                            },\n                            fields: [\"parent\", \"creation\"]\n                        }).then(function(deliverynotes) {\n                            console.log(deliverynotes);\n                            var udeliverynotes=deliverynotes.filter((a,i)=>deliverynotes.findIndex((s)=>a.parent==s.parent)===i);\n                            udeliverynotes.forEach(function(deliverynote){\n                                var d = frm.add_child(\"challan_details\");\n                                d.delivery_note = deliverynote.parent;\n                                d.date = deliverynote.creation;\n                                frm.refresh_field(\"challan_details\");\n                            });\n                            \n                        \n                        \n                        \n                            // fetching work order\n                            frappe.db.get_list('Work Order', {\n                                filters: {\n                                    sales_order: ['=', order.name]\n                                },\n                                fields:[\"name\",\"sales_order\",\"item_name\",\"production_item\",\"qty\",\"stock_uom\",\"serial_no\"]\n                            }).then(function(workorders) {\n                                console.log(workorders);\n                                workorders.forEach(function(workorder){\n                                    var d = frm.add_child(\"work_order_detail\");\n                                    d.wo_details = workorder.name;\n                                    d.item = workorder.item_name;\n                                    d.sales_order = workorder.sales_order;\n                                    d.qty = workorder.qty;\n                                    d.unit = workorder.stock_uom;\n                                    d.part_no = workorder.production_item;\n                                    frm.refresh_field(\"work_order_detail\");\n                                });\n                            \n                                // fetching CA Form\n                                frappe.db.get_list('Work Order', {\n                                    filters: {\n                                        sales_order: ['=', order.name]\n                                    },\n                                    fields: [\"name\"]\n                                }).then(function(workorders) {\n                                    console.log(workorders);\n                                    \n                                    workorders.forEach(function(workorder){\n                                        frappe.db.get_list('CA Form', {\n                                            filters: {\n                                                work_order: ['=', workorder.name]\n                                            },\n                                            fields: [\"name\",\"posting_date\"]\n                                        }).then(function(ca_forms) {\n                                            console.log(ca_forms);\n                                            var uca_forms=ca_forms.filter((a,i)=>workorders.findIndex((s)=>a.parent==s.parent)===i);\n                                            uca_forms.forEach(function(ca_form){\n                                                var d = frm.add_child(\"ca_form_details\");\n                                                d.ca_form = ca_form.name;\n                                                d.date = ca_form.posting_date;\n                                                frm.refresh_field(\"ca_form_details\");\n                                            });\n                                        });\n                                    });\n                                });\n                            });\n                        });\n                    });\n                    });\n                });\n                        //fetching COC\n                        frappe.db.get_list('Certificate of Conformance', {\n                            filters: {\n                                rn_no: ['=', frm.doc.rn_no]\n                            },\n                            fields: [\"name\", \"date\"]\n                        }).then(function(cocs) {\n                           // console.log(workorders);\n                            //var uworkorders=workorders.filter((a,i)=>workorders.findIndex((s)=>a.parent==s.parent)===i);\n                            cocs.forEach(function(obj){\n                                var d = frm.add_child(\"certificate_of_conformance_details\");\n                                d.certificate_of_conformance = obj.name;\n                                d.date = obj.date;\n                                frm.refresh_field(\"certificate_of_conformance_details\");\n                            });\n            });\n        }\n    }\n    else  {\n        \n         frm.clear_table(\"sales_invoice_details\");\n         frm.clear_table(\"certificate_of_conformance_details\");\n         frm.clear_table(\"challan_details\");\n         frm.clear_table(\"work_order_detail\");\n         frm.clear_table(\"ca_form_details\");\n         frm.refresh_field(\"sales_invoice_details\");\n         frm.refresh_field(\"challan_details\");\n         frm.refresh_field(\"work_order_detail\");\n         frm.refresh_field(\"ca_form_details\");\n         frm.refresh_field(\"certificate_of_conformance_details\");\n    }\n    }\n    \n});\n\nfunction getDateString(datetimeString) {\n  var datetime = new Date(datetimeString);\n  var year = datetime.getFullYear();\n  var month = (\"0\" + (datetime.getMonth() + 1)).slice(-2);\n  var date = (\"0\" + datetime.getDate()).slice(-2);\n  return date + \"-\" + month + \"-\" + year;\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Outward Checklist",
  "enabled": 1,
  "modified": "2023-03-24 16:44:17.598616",
  "module": null,
  "name": "New Script",
  "script": "frappe.ui.form.on('Outward Checklist', {\n    rn_no: function(frm) {\n         frm.clear_table(\"sales_invoice_details\");\n         frm.clear_table(\"certificate_of_conformance_details\");\n         frm.clear_table(\"challan_details\");\n         frm.clear_table(\"work_order_detail\");\n         frm.clear_table(\"ca_form_details\");\n         frm.refresh_field(\"sales_invoice_details\");\n         frm.refresh_field(\"challan_details\");\n         frm.refresh_field(\"work_order_detail\");\n         frm.refresh_field(\"ca_form_details\");\n         frm.refresh_field(\"certificate_of_conformance_details\");\n        \n        if (frm.doc.rn_no) {\n            frappe.db.get_list('Sales Order', {\n                filters: {\n                    repair_note: ['=', frm.doc.rn_no]\n                }\n            }).then(function(orders) {\n                console.log(orders);\n                orders.forEach(function(order){\n                    \n                    \n                    //fetching sales invoice\n                    frappe.db.get_list('Sales Invoice Item', {\n                        filters: {\n                            sales_order: ['=', order.name]\n                        },\n                        fields: [\"parent\", \"creation\"]\n                    }).then(function(salesinvoices) {\n                        console.log(salesinvoices);\n                        var usalesinvoices=salesinvoices.filter((a,i)=>salesinvoices.findIndex((s)=>a.parent==s.parent)===i);\n                        usalesinvoices.forEach(function(salesinvoice){\n                            var d = frm.add_child(\"sales_invoice_details\");\n                            d.sales_invoice = salesinvoice.parent;\n                            d.date = salesinvoice.creation;\n                            frm.refresh_field(\"sales_invoice_details\");\n                        });\n                        \n                        //fetching delivery note\n                        frappe.db.get_list('Delivery Note Item', {\n                            filters: {\n                                against_sales_order: ['=', order.name]\n                            },\n                            fields: [\"parent\", \"creation\"]\n                        }).then(function(deliverynotes) {\n                            console.log(deliverynotes);\n                            var udeliverynotes=deliverynotes.filter((a,i)=>deliverynotes.findIndex((s)=>a.parent==s.parent)===i);\n                            udeliverynotes.forEach(function(deliverynote){\n                                var d = frm.add_child(\"challan_details\");\n                                d.delivery_note = deliverynote.parent;\n                                d.date = deliverynote.creation;\n                                frm.refresh_field(\"challan_details\");\n                            });\n                            \n                            // fetching work order\n                            frappe.db.get_list('Work Order', {\n                                filters: {\n                                    sales_order: ['=', order.name]\n                                },\n                                fields:[\"name\",\"sales_order\",\"item_name\",\"production_item\",\"qty\",\"stock_uom\",\"serial_no\"]\n                            }).then(function(workorders) {\n                                console.log(workorders);\n                                workorders.forEach(function(workorder){\n                                    var d = frm.add_child(\"work_order_detail\");\n                                    d.wo_details = workorder.name;\n                                    d.item = workorder.item_name;\n                                    d.sales_order = workorder.sales_order;\n                                    d.qty = workorder.qty;\n                                    d.unit = workorder.stock_uom;\n                                    d.part_no = workorder.production_item;\n                                    frm.refresh_field(\"work_order_detail\");\n                                });\n                            \n                                // fetching CA Form\n                                frappe.db.get_list('Work Order', {\n                                    filters: {\n                                        sales_order: ['=', order.name]\n                                    },\n                                    fields: [\"name\"]\n                                }).then(function(workorders) {\n                                    console.log(workorders);\n                                    \n                                    workorders.forEach(function(workorder){\n                                        frappe.db.get_list('CA Form', {\n                                            filters: {\n                                                work_order: ['=', workorder.name]\n                                            },\n                                            fields: [\"name\",\"posting_date\"]\n                                        }).then(function(ca_forms) {\n                                            console.log(ca_forms);\n                                            var uca_forms=ca_forms.filter((a,i)=>workorders.findIndex((s)=>a.parent==s.parent)===i);\n                                            uca_forms.forEach(function(ca_form){\n                                                var d = frm.add_child(\"ca_form_details\");\n                                                d.ca_form = ca_form.name;\n                                                d.date = ca_form.posting_date;\n                                                frm.refresh_field(\"ca_form_details\");\n                                            });\n                                        });\n                                    });\n                                });\n                            });\n                        });\n                    });\n                    });\n                });\n                        //fetching COC\n                        frappe.db.get_list('Certificate of Conformance', {\n                            filters: {\n                                rn_no: ['=', frm.doc.rn_no]\n                            },\n                            fields: [\"name\", \"date\"]\n                        }).then(function(cocs) {\n                           // console.log(workorders);\n                            //var uworkorders=workorders.filter((a,i)=>workorders.findIndex((s)=>a.parent==s.parent)===i);\n                            cocs.forEach(function(obj){\n                                var d = frm.add_child(\"certificate_of_conformance_details\");\n                                d.certificate_of_conformance = obj.name;\n                                d.date = obj.date;\n                                frm.refresh_field(\"certificate_of_conformance_details\");\n                            });\n            });\n        }\n   \n    else  {\n         frm.clear_table(\"sales_invoice_details\");\n         frm.clear_table(\"certificate_of_conformance_details\");\n         frm.clear_table(\"challan_details\");\n         frm.clear_table(\"work_order_detail\");\n         frm.clear_table(\"ca_form_details\");\n         frm.refresh_field(\"sales_invoice_details\");\n         frm.refresh_field(\"challan_details\");\n         frm.refresh_field(\"work_order_detail\");\n         frm.refresh_field(\"ca_form_details\");\n         frm.refresh_field(\"certificate_of_conformance_details\");\n    }\n    }\n    \n});\n\nfunction getDateString(datetimeString) {\n  var datetime = new Date(datetimeString);\n  var year = datetime.getFullYear();\n  var month = (\"0\" + (datetime.getMonth() + 1)).slice(-2);\n  var date = (\"0\" + datetime.getDate()).slice(-2);\n  return date + \"-\" + month + \"-\" + year;\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 0,
  "modified": "2023-03-28 14:19:30.265499",
  "module": null,
  "name": "Filter data of repair note where Sales order is Null",
  "script": "//frappe.ui.form.on(\"Sales Order\", \"refresh\", function(frm) {\n   // frm.set_query(\"repair_note\", function() {\n     //   return {\n      //      \"filters\": {\n      //          \"docstatus\": 1,\n    //            \"repair_note\": null,\n               \n    //        }\n   //     };\n   // });\n//});\n//frappe.ui.form.on(\"Sales Order\", \"refresh\", function(frm) {\n   // frappe.db.get_list('Sales Order', {\n   //     filters: {\n          \n     //       \"repair_note\": null\n    //    }\n   // }).then(function(sales_orders) {\n        // handle the list of sales orders\n  //      console.log(sales_orders);\n  //  });\n//});\n\n\nfrappe.ui.form.on(\"Sales Order\", \"refresh\", function(frm) {\n    cur_frm.set_query(\"repair_note\", function() {\n        return {\n            \"filters\": {\n                \"repair_note\": null\n            }\n        };\n    });\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2023-04-27 14:57:32.047276",
  "module": "Repair Management",
  "name": "Generating new item with item group Products from services item",
  "script": "frappe.ui.form.on('Item', {\nafter_save: function(frm) {\n        if (frm.doc.item_group === 'Services' && frm.doc.item_code.startsWith(\"RN-\")){\n            //debugger;\n            // create new product item\n            var new_item = Object.assign({}, frm.doc);// frappe.db.get_value('Item',frm.doc.name);\n            \n            new_item.item_code = frm.doc.item_code.replace(\"RN-\",\"\");\n            new_item.name=new_item.item_code;\n            new_item.item_group = 'Products';  // set new item group\n            new_item.is_stock_item = '1';  // check Maintain Stock\n            new_item.is_sales_item = '1';  // check Allow Sales\n            new_item.include_item_in_manufacturing = '1';  // check Include item in manufacturing\n            new_item.vaspl_drawing_no=\"\";\n            // save new item\n            frappe.call({\n                method: 'frappe.client.insert',\n                args: {\n                    doc: new_item\n                },\n                callback: function(response) {\n                    // show success message and refresh form\n                    frappe.show_alert('New item created: ' + response.message.name);\n                    frm.reload_doc();\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2023-04-13 16:03:35.051082",
  "module": null,
  "name": "Custom button quotation",
  "script": "frappe.ui.form.on('Quotation', {\n    refresh: function(frm) {\n         if (frm.doc.customer_name) {\n            frm.add_custom_button(__('Open Report'), function() {\n          //  var customer = frm.doc.items[0].item_code;\n            var customer = frm.doc.customer_name; // Get the value of the customer field in the Quotation form\n            var report_url = 'https://vaspl.mozility.com/app/quotation/view/report?party_name=' + encodeURIComponent(customer);\n            window.open(report_url, '_blank');\n            }).css({'background-color': 'green', 'color': 'white'});\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CA Form",
  "enabled": 1,
  "modified": "2023-04-10 16:48:37.094059",
  "module": null,
  "name": "trigger ca form",
  "script": "frappe.ui.form.on('CA Form', {\n\t\tcompany: function(frm){\n\t    console.log(frm)\n\t}\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-04-24 11:10:52.250052",
  "module": null,
  "name": "fetch uom in work order item table",
  "script": "cur_frm.add_fetch('item_code','stock_uom','uom');\ncur_frm.add_fetch('item_code','oem_part_no','oem_part_no');\ncur_frm.add_fetch('item_code','vaspl_part_no','vaspl_part_no');\n\nfrappe.ui.form.on('Work Order Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-04-11 14:54:15.235018",
  "module": null,
  "name": "trigger work order",
  "script": "frappe.ui.form.on('Work Order', {\n\t\tplanned_start_date: function(frm){\n\t    console.log(frm)\n\t}\n})\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-04-14 17:13:39.557763",
  "module": null,
  "name": "fetch production plan item",
  "script": "frappe.ui.form.on(\"Work Order\", {\n    \n    \"production\": function(frm) {\n        frm.clear_table(\"production_items\");\n        frm.refresh_field(\"production_items\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.production){\n                frappe.model.with_doc(\"Production Plan\", frm.doc.production, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Production Plan\", frm.doc.production);\n                      // console.log(tabletransfer1);\n                        var qty=0;\n                        $.each(tabletransfer1.po_items, function(index, row){\n                            var d = frm.add_child(\"production_items\");\n                            d.item_code = row.item_code;\n                            d.bom_no1 = row.bom_no;\n                            d.planned_qty = row.planned_qty;\n                            qty+=row.planned_qty;\n                            frm.refresh_field(\"production_items\");\n                            frm.clear_table(\"required_items\");\n                            frm.refresh_field(\"required_items\");\n                            fetch_rawmaterial(frm,d);\n                            \n                        });\n                        frm.set_value('qty',qty);\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"production_items\");\n                frm.refresh_field(\"production_items\");\n            }\n            \n    }\n    \n});\nfunction fetch_rawmaterial(frm,bomItem){\n    frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'BOM',\n                    name: bomItem.bom_no1\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        var items = r.message.items;\n                        //row.required_items = [];\n                        for (var i = 0; i < items.length; i++) {\n                            var item = items[i];\n                            var item_row = frm.add_child('required_items');\n                            item_row.item_code = item.item_code;\n                            item_row.required_qty=item.qty*bomItem.planned_qty;\n                            item_row.uom=item.uom;\n                            item_row.description=item.description;\n                            item_row.include_item_in_manufacturing=item.include_item_in_manufacturing;\n                            item_row.rate=item.rate;\n                            item_row.amount=item.amount*bomItem.planned_qty;\n                            item_row.allow_alternative_item=item.allow_alternative_item;\n                            item_row.source_warehouse=item.source_warehouse;\n                        }\n                        frm.refresh_field('required_items');\n                    }\n                }\n            });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 0,
  "modified": "2023-04-14 11:32:38.708015",
  "module": null,
  "name": "Calculate Raw Material based on multiple items in Work Order",
  "script": "frappe.ui.form.on('Work Order', \n{\n  refresh: function(frm) \n  {\n    // Get the list of items in the work order\n    var items = frm.doc.items;\n    // Define an object to store the raw material requirements for each item\n    var rawMaterial = {};\n    // Loop through each item in the work order\n    for (var i = 0; i < items.length; i++) \n    {\n      var item = items[i];\n      // Loop through each raw material required for the item\n      for (var j = 0; j < item.required_items.length; j++) \n      {\n        var material = item.required_items[j];\n        // If this raw material hasn't been added to the list yet, add it with the required quantity\n        if (!rawMaterial[material.item_code]) \n        {\n          rawMaterial[material.item_code] = material.qty * item.qty;\n        }\n        // Otherwise, add the required quantity to the existing total for this material\n        else \n        {\n          rawMaterial[material.item_code] += material.qty * item.qty;\n        }\n      }\n    }\n    // Set the value of the \"Raw Material Required\" field based on the raw material requirements\n    var rawMaterialStr = \"\";\n    for (var itemCode in rawMaterial) \n    {\n      rawMaterialStr += itemCode + \": \" + rawMaterial[itemCode] + \"\\n\";\n    }\n    frm.set_value('required_items', rawMaterialStr);\n  }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-04-14 12:59:02.597770",
  "module": null,
  "name": "fetch production item table in Workorder table",
  "script": "frappe.ui.form.on('Work Order', {\n    production_items: function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n        frm.events[\"bom_no1\"](frm, row);\n       // console.log(row.bom_no);\n    },\n    bom_no1: function(frm, row) {\n        console.log(row.bom_no1); // Add this line to log the bom_no value\n        if (row.bom_no1) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'BOM',\n                    name: row.bom_no1\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        var items = r.message.items;\n                        row.required_items = [];\n                        for (var i = 0; i < items.length; i++) {\n                            var item_code = items[i].item_code;\n                            var item_row = frm.add_child(row, 'required_items', 'required_items');\n                            item_row.item_code = item_code;\n                        }\n                        frm.refresh_field('production_items');\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2023-04-18 11:16:57.791308",
  "module": null,
  "name": "total_with_gst calculation",
  "script": "frappe.ui.form.on(\"Quotation Item\", {\n  amount: function(frm, cdt, cdn) {\n    var item = locals[cdt][cdn];\n    var total_with_gst = item.amount + item.gst_amount;\n    frappe.model.set_value(cdt, cdn, \"total_with_gst\", total_with_gst);\n  },\n  gst_amount: function(frm, cdt, cdn) {\n    var item = locals[cdt][cdn];\n    var total_with_gst = item.amount + item.gst_amount;\n    frappe.model.set_value(cdt, cdn, \"total_with_gst\", total_with_gst);\n  }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CMM",
  "enabled": 1,
  "modified": "2023-04-14 17:37:05.771921",
  "module": null,
  "name": "Real time update from CMM to Procedure Sheet",
  "script": "frappe.ui.form.on(\"CMM\", {\r\n    validate: function(frm) {\r\n        // Get the Issue No and Revision No fields from the CMM DocType\r\n        var issue_no = frm.doc.issue_no;\r\n        var revision_no = frm.doc.revision_no;\r\n\r\n        // Update the A1 and B1 fields in the Procedure Sheet DocType\r\n        frappe.db.set_value(\"Procedure Sheet\", \"Procedure Sheet 1\", {\r\n            \"issue_no_01\": issue_no,\r\n            \"rev_no_01\": revision_no\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CA Form",
  "enabled": 0,
  "modified": "2023-04-24 16:28:46.633517",
  "module": null,
  "name": "fetch qty from Delivery note n CA Form",
  "script": "frappe.ui.form.on(\"CA Form\", {\n    \n    \"delivery_note\": function(frm) {\n        \n        frm.clear_table(\"work_order_table\");\n        frm.refresh_field(\"work_order_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.delivery_note){\n                \n                frappe.model.with_doc(\"Delivery Note\", frm.doc.delivery_note, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Delivery Note\", frm.doc.delivery_note);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.items, function(index, row){\n                            var d = frm.add_child(\"work_order_table\");\n                            \n                            d.qty = row.qty;\n\n                           \n                        \n                            frm.refresh_field(\"work_order_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"work_order_table\");\n                frm.refresh_field(\"work_order_table\");\n            }\n            \n    }\n    \n});\n/*\nfrappe.ui.form.on('Child of CA Form', {\n    work_order: function(frm, cdt, cdn) {\n        var child = locals[cdt][cdn];\n        if (child.work_order) {\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    'doctype': 'Work Order',\n                    'filters': {'name': child.work_order},\n                    'fieldname': 'delivery_note'\n                },\n                callback: function(r) {\n                    frappe.model.set_value(cdt, cdn, 'delivery_note', r.message.delivery_note);\n                }\n            });\n        }\n    }\n});*/\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Work Order",
  "enabled": 1,
  "modified": "2023-04-18 13:24:53.547760",
  "module": "",
  "name": "Fetch Production Item table in Service Work Order",
  "script": "frappe.ui.form.on('Service Work Order', {\n    production_items: function(frm, cdt, cdn) {\n        var row = locals[cdt][cdn];\n        frm.events[\"bom_no1\"](frm, row);\n       // console.log(row.bom_no);\n    },\n    bom_no1: function(frm, row) {\n        console.log(row.bom_no1); // Add this line to log the bom_no value\n        if (row.bom_no1) {\n            frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'BOM',\n                    name: row.bom_no1\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        var items = r.message.items;\n                        row.required_items = [];\n                        for (var i = 0; i < items.length; i++) {\n                            var item_code = items[i].item_code;\n                            var item_row = frm.add_child(row, 'required_items', 'required_items');\n                            item_row.item_code = item_code;\n                        }\n                        frm.refresh_field('production_items');\n                    }\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Work Order",
  "enabled": 1,
  "modified": "2023-05-01 18:04:18.714090",
  "module": null,
  "name": "Fetch Production Items in Service Work Order",
  "script": "frappe.ui.form.on(\"Service Work Order\", {\n    \n    \"production\": function(frm) {\n        frm.clear_table(\"production_items\");\n        frm.refresh_field(\"production_items\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.production){\n                frappe.model.with_doc(\"Production Plan\", frm.doc.production, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Production Plan\", frm.doc.production);\n                      // console.log(tabletransfer1);\n                        var qty=0;\n                        $.each(tabletransfer1.po_items, function(index, row){\n                            var d = frm.add_child(\"production_items\");\n                            d.item_code = row.item_code;\n                            d.bom_no1 = row.bom_no;\n                            d.planned_qty = row.planned_qty;\n                            d.pending_qty=row.planned_qty;\n                            d.completed_qty=0;\n                            d.warehouse = frm.doc.fg_warehouse;\n                            qty+=row.planned_qty;\n                            frm.refresh_field(\"production_items\");\n                            frm.clear_table(\"required_items\");\n                            frm.refresh_field(\"required_items\");\n                            fetch_rawmaterial(frm,d);\n                            \n                        });\n                        frm.set_value('qty',qty);\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"production_items\");\n                frm.refresh_field(\"production_items\");\n            }\n            \n    }\n    \n});\nfunction fetch_rawmaterial(frm,bomItem){\n    console.log(frm.doc);\n    frappe.call({\n                method: 'frappe.client.get',\n                args: {\n                    doctype: 'BOM',\n                    name: bomItem.bom_no1\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        var items = r.message.items;\n                        //row.required_items = [];\n                        items.forEach(function(item){\n                        //for (var i = 0; i < items.length; i++) {\n                            //var item = items[i];\n                            //debugger;\n                            var found = frm.doc.required_items.find(x=>x.item_code==item.item_code);\n                            if(found){\n                                found.required_qty+= item.qty*bomItem.planned_qty;\n                                //found.amount= found.required_qty*found.required_qty;\n                            }else{\n                                //if(frm.doc.required_items.any())\n                                var item_row = frm.add_child('required_items');\n                                item_row.item_code = item.item_code;\n                                item_row.required_qty=item.qty*bomItem.planned_qty;\n                                item_row.uom=item.uom;\n                                item_row.description=item.description;\n                                item_row.include_item_in_manufacturing=item.include_item_in_manufacturing;\n                                item_row.rate=item.rate;\n                                item_row.amount=item.amount*bomItem.planned_qty;\n                                item_row.allow_alternative_item=item.allow_alternative_item;\n                                item_row.source_warehouse=item.source_warehouse;\n                            }\n                        })\n                        frm.refresh_field('required_items');\n                    }\n                }\n            });\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2023-04-18 14:50:57.193507",
  "module": null,
  "name": "Add Service Work Order Button in Production Plan",
  "script": "frappe.ui.form.on(\"Production Plan\", {\r\n    refresh: function(frm) {\r\n                frm.add_custom_button(__('Service Work Order'), function() {\r\n            frappe.model.with_doctype('Service Work Order', function() {\r\n                var doc = frappe.model.get_new_doc('Service Work Order');\r\n                doc.production = frm.doc.name; \r\n                frappe.set_route('Form', doc.doctype, doc.name);\r\n            });\r\n        }, __(\"Create\"));\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Work Order",
  "enabled": 0,
  "modified": "2023-04-24 14:03:54.388802",
  "module": "Repair Management",
  "name": "Start and End Button Service Work Order",
  "script": "frappe.ui.form.on('Service Work Order', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1 && !frm.doc.start_button) {\r\n            frm.add_custom_button(__('Start'), function() {\r\n                frappe.prompt({label: 'Quantity', fieldname: 'quantity', fieldtype: 'Float'},\r\n                    function(data) {\r\n                        frm.set_value('status', 'In Process');\r\n                        frm.set_value('start_button', true);\r\n                        frm.submit();\r\n                        // create stock entry for material transfer\r\n                        frappe.model.with_doc('Service Work Order', frm.doc.name, function() {\r\n                            var doc = frappe.model.get_doc('Service Work Order', frm.doc.name);\r\n                            /*var item_qty_map = {};\r\n                            for (var i in doc.required_items) {\r\n                                var item = doc.required_items[i].item_code;\r\n                                if (!item_qty_map[item]) {\r\n                                    item_qty_map[item] = doc.required_items[i].qty;\r\n                                } else {\r\n                                    item_qty_map[item] += doc.required_items[i].qty;\r\n                                }\r\n                            }\r\n                            var stock_entry = frappe.model.get_new_doc('Stock Entry');\r\n                            stock_entry.purpose = 'Material Transfer for Manufacture';\r\n                            stock_entry.company = doc.company;\r\n                            stock_entry.type = 'Material Transfer for Manufacture';\r\n                            stock_entry.from_bom = 1;\r\n                            stock_entry.bom_no = doc.bom_no;\r\n                            stock_entry.fg_completed_qty = 0;\r\n                            stock_entry.items = [];\r\n                            for (var i in doc.required_items) {\r\n                                stock_entry.items.push({\r\n                                    item_code: doc.required_items[i].item_code,\r\n                                    qty: doc.required_items[i].required_qty,\r\n                                  //  s_warehouse: doc.production_warehouse,\r\n                                    s_warehouse: \"Work In Progress - VASPL\",\r\n                                   // t_warehouse: doc.required_items[0].default_warehouse\r\n                                   t_warehouse: \"Finished Goods - VASPL\"\r\n                                });\r\n                            }\r\n                            frappe.set_route('Form', 'Stock Entry', stock_entry.name);*/\r\n                            frappe.new_doc('Stock Entry', {\r\n                                stock_entry_type: 'Material Transfer for Manufacture',\r\n                                from_warehouse: frm.doc.source_warehouse,\r\n                                to_warehouse: frm.doc.wip_warehouse,\r\n                                service_work_order: frm.doc.name,\r\n                                callback: function(r) {\r\n                                    frm.doc.start_button = false;\r\n                                    if (r.docname) \r\n                                    {\r\n                                        cur_frm.set_value('material_transfer_for_manufacture', r.docname);\r\n                                        cur_frm.refresh_field('material_transfer_for_manufacture');\r\n                                        frm.set_df_property('material_transfer_for_manufacture_button', 'read_only', 1);\r\n                                    } \r\n                                    else \r\n                                    {\r\n                                        frappe.msgprint(__('Error creating document'));\r\n                                    }\r\n                                }\r\n                            });\r\n                            \r\n                        });\r\n                    })\r\n            })\r\n        .addClass('btn-primary');\r\n        }else{\r\n                        frm.add_custom_button(__('End'), function() {\r\n                            frappe.model.with_doc('Service Work Order', frm.doc.name, function() {\r\n                                var doc = frappe.model.get_doc('Service Work Order', frm.doc.name);\r\n                                var stock_entry = frappe.model.get_new_doc('Stock Entry');\r\n                                stock_entry.purpose = 'Manufacture';\r\n                                stock_entry.company = doc.company;\r\n                                stock_entry.from_bom = 1;\r\n                                stock_entry.bom_no = doc.bom_no;\r\n                                stock_entry.fg_completed_qty = data.quantity;\r\n                                stock_entry.items = [];\r\n                                for (var i in doc.required_items) {\r\n                                    stock_entry.items.push({\r\n                                        item_code: doc.required_items[i].item_code,\r\n                                        qty: data.quantity * doc.required_items[i].qty,\r\n                                        s_warehouse: doc.required_items[i].default_warehouse,\r\n                                        t_warehouse: doc.production_warehouse\r\n                                    });\r\n                                }\r\n                                frappe.call({\r\n                                    method: 'frappe.client.insert',\r\n                                    args: {\r\n                                        doc: stock_entry\r\n                                    },\r\n                                    callback: function(response) {\r\n                                        frappe.set_route('Form', 'Stock Entry', response.message.name);\r\n                                        frm.set_value('status', 'Completed');\r\n                                        frm.save();\r\n                                    }\r\n                                });\r\n                            });\r\n                        }).addClass('btn-danger');\r\n                        frm.doc.start_button = true;\r\n                    \r\n            \r\n        }\r\n    }\r\n});\r\n\r\n\r\n/*\r\nfrappe.ui.form.on('Service Work Order', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.docstatus === 1 && !frm.doc.start_button) \r\n        {\r\n            frm.add_custom_button(__('Start'), function() {\r\n                frappe.prompt({label: 'Quantity', fieldname: 'quantity', fieldtype: 'Float'},\r\n                    function(data) {\r\n                        frappe.call({\r\n                            method: 'vaspl_repair_management.repair_management.doctype.repair_management.repair_management.start_service_work_order',\r\n                            args: {\r\n                                'service_work_order': frm.doc.name,\r\n                                'quantity': data.quantity\r\n                            },\r\n                            callback: function(r) {\r\n                                if (r.message) \r\n                                {\r\n                                    frappe.show_alert({\r\n                                        message: __('Service Work Order started'),\r\n                                        indicator: 'green'\r\n                                    });\r\n                                    frm.reload_doc();\r\n                                }\r\n                            }\r\n                        });\r\n                    },\r\n                    'Material Transfer for Service Work Order'\r\n                );\r\n            }).addClass('btn-primary');\r\n            frm.doc.start_button = true;\r\n        }\r\n        if (frm.doc.docstatus === 1 && frm.doc.status === 'Started' && !frm.doc.end_button) \r\n        {\r\n            frm.add_custom_button(__('End'), function() {\r\n                frappe.call({\r\n                    method: 'vaspl_repair_management.repair_management.doctype.repair_management.repair_management.end_service_work_order',\r\n                    args: {\r\n                        'service_work_order': frm.doc.name\r\n                    },\r\n                    callback: function(r) {\r\n                        if (r.message) \r\n                        {\r\n                            frappe.show_alert({\r\n                                message: __('Service Work Order ended'),\r\n                                indicator: 'green'\r\n                            });\r\n                            frm.reload_doc();\r\n                        }\r\n                    }\r\n                });\r\n            }).addClass('btn-danger');\r\n            frm.doc.end_button = true;\r\n        }\r\n    }\r\n});\r\n\r\n*/\r\n\r\n/*\r\n\r\nfrom frappe import _\r\n\r\n@frappe.whitelist()\r\ndef start_service_work_order(service_work_order, quantity):\r\n    work_order = frappe.get_doc('Service Work Order', service_work_order)\r\n    if work_order.status == 'Submitted':\r\n        work_order.status = 'Started'\r\n        work_order.save(ignore_permissions=True)\r\n        # create stock entry for material transfer\r\n        se = frappe.new_doc('Stock Entry')\r\n        se.purpose = 'Material Transfer for Manufacture'\r\n        se.from_warehouse = work_order.raw_material_warehouse\r\n        se.to_warehouse = work_order.manufacturing_location\r\n        se.append('items', {\r\n            'item_code': work_order.raw_material_item,\r\n            'qty': quantity\r\n        })\r\n        se.save(ignore_permissions=True)\r\n        return _('Service work order {0} started').format(work_order.name)\r\n\r\n@frappe.whitelist()\r\ndef end_service_work_order(service_work_order):\r\n    work_order = frappe.get_doc('Service Work Order', service_work_order)\r\n    if work_order.status == 'Started':\r\n        work_order.status = 'Completed'\r\n        work_order.save(ignore_permissions=True)\r\n        # create stock entry for finished goods\r\n        se = frappe.new_doc('Stock Entry')\r\n        se.purpose = 'Manufacture'\r\n        se.from_bom = 1\r\n        se.bom_no = work_order.bom\r\n        se.to_warehouse = work_order.finished_goods_warehouse\r\n        se.append('items', {\r\n            'item_code': work\r\n*/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-04-21 16:04:22.639936",
  "module": "Repair Management",
  "name": "Fetch raw material table in stock entry page",
  "script": "frappe.ui.form.on(\"Stock Entry\", {\n    \n    \"service_work_order\": function(frm) {\n        \n        frm.clear_table(\"items\");\n        frm.refresh_field(\"items\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.service_work_order && frm.doc.stock_entry_type === \"Material Transfer for Manufacture\"){\n                \n                frappe.model.with_doc(\"Service Work Order\", frm.doc.service_work_order, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Service Work Order\", frm.doc.service_work_order);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.required_items, function(index, row){\n                            var d = frm.add_child(\"items\");\n                            \n                            d.item_code = row.item_code;\n                            d.transfer_qty = row.required_qty;\n                            d.qty = row.required_qty;\n                            d.to_warehouse = row.source_warehouse;\n                            d.uom = row.uom;\n                            d.conversion_factor = 1;\n                           \n                            frm.refresh_field(\"items\");\n                            \n                        });\n                    \n                });\n            }\n             else if(frm.doc.service_work_order && frm.doc.stock_entry_type === \"Manufacture\"){\n                \n                 frappe.model.with_doc(\"Service Work Order\", frm.doc.service_work_order, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Service Work Order\", frm.doc.service_work_order);\n                        $.each(tabletransfer1.production_items, function(index, row){\n                            var d = frm.add_child(\"items\");\n                            \n                            d.item_code = row.item_code;\n                            d.transfer_qty = row.planned_qty;\n                            d.qty = row.planned_qty;\n                            d.conversion_factor = 1;\n                          \n                            frm.refresh_field(\"items\");\n                            \n                        });\n                    \n                });\n                \n            }\n\n          \n            else  {\n                frm.clear_table(\"items\");\n                frm.refresh_field(\"items\");\n            }\n            \n    }\n    \n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Repair Note 1",
  "enabled": 1,
  "modified": "2023-05-01 17:32:55.934847",
  "module": "Repair Management",
  "name": "Sales Order button in Repair Note",
  "script": "frappe.ui.form.on(\"Repair Note 1\", {\n    refresh: function(frm) {\n                frm.add_custom_button(__('Create Sales Order'), function() {\n                frappe.model.with_doctype('Sales Order', function() {\n                var doc = frappe.model.get_new_doc('Sales Order');\n                doc.repair_note = frm.doc.name; \n                frappe.set_route('Form', doc.doctype, doc.name);\n            });\n        }, __(\"Create\")).addClass(\"btn-warning\").css({'color':'blue','font-weight': 'bold'});\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Order",
  "enabled": 1,
  "modified": "2023-04-18 16:12:55.043140",
  "module": null,
  "name": "Create Production Plan Button in Sales Order",
  "script": "frappe.ui.form.on(\"Sales Order\", {\n    refresh: function(frm) {\n                frm.add_custom_button(__('Create Production Plan'), function() {\n            frappe.model.with_doctype('Production Plan', function() {\n                var doc = frappe.model.get_new_doc('Production Plan');\n                doc.sales_order = frm.doc.name; \n                frappe.set_route('Form', doc.doctype, doc.name);\n            });\n        }, __(\"Create\"));\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2023-04-18 18:08:40.785458",
  "module": null,
  "name": "Fetch sales order child table in production plan",
  "script": "frappe.ui.form.on(\"Production Plan\", {\n    \n    \"sales_order\": function(frm) {\n        \n        frm.clear_table(\"po_items\");\n        frm.refresh_field(\"po_items\");\n        \n            if(frm.doc.sales_order){\n                \n                frappe.model.with_doc(\"Sales Order\", frm.doc.sales_order, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Sales Order\", frm.doc.sales_order);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.items, function(index, row){\n                            var d = frm.add_child(\"po_items\");\n                            \n                            d.item_code = row.item_code;\n                            d.planned_qty = row.qty;\n                        \n                            frm.refresh_field(\"po_items\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"po_items\");\n                frm.refresh_field(\"po_items\");\n            }\n            \n    }\n    \n});\n//cur_frm.add_fetch(item_code,  default_bom,  bom_no);\n//cur_frm.add_fetch('item_code','default_bom','bom_no');\n\n/*frappe.ui.form.on('Production Plan', {\n  item_code: function(frm, cdt, cdn) {\n    cur_frm.add_fetch('item_code','default_bom','bom_no');\n    \n   // frm.set_value('bom_no', 'Your custom value'); // Set the value of 'bom_no' field with your custom value\n  }\n});\n\nfrappe.ui.form.on('Production Plan', {\n  item_code: function(frm, cdt, cdn) {\n    var row = locals[cdt][cdn];\n    frappe.call({\n      method: 'your_custom_method',\n      args: {\n        'item_code': row.item_code,\n      },\n      callback: function(r) {\n        if (r.message) {\n          row.bom_no = r.message;\n          refresh_field('items');\n        }\n      }\n    });\n  }\n});\n\nfunction your_custom_method(item_code) {\n  cur_frm.add_fetch('item_code','default_bom','bom_no');\n  return 'Your custom bom_no';\n}\n*/\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Work Order",
  "enabled": 0,
  "modified": "2023-04-24 14:03:54.528133",
  "module": "Repair Management",
  "name": "Create Button in Service Work Order",
  "script": "frappe.ui.form.on('Service Work Order', {\n    refresh: function(frm) {\n        \n        frm.add_custom_button(__('Material Transfer for Manufacture'), function() {\n            debugger;\n            frappe.db.get_doc('Service Work Order', frm.doc.name)\n                .then(doc => {\n                    console.log(doc)\n                    if (!frm.doc.material_transfer_for_manufacture) \n                    {\n                        frappe.new_doc('Stock Entry', {\n                            stock_entry_type: 'Material Transfer for Manufacture',\n                            from_warehouse: frm.doc.source_warehouse,\n                            to_warehouse: frm.doc.wip_warehouse,\n                            service_work_order: frm.doc.name,\n                            callback: function(r) {\n                                if (r.docname) \n                                {\n                                    cur_frm.set_value('material_transfer_for_manufacture', r.docname);\n                                    cur_frm.refresh_field('material_transfer_for_manufacture');\n                                    frm.set_df_property('material_transfer_for_manufacture_button', 'read_only', 1);\n                                } \n                                else \n                                {\n                                    frappe.msgprint(__('Error creating document'));\n                                }\n                            }\n                        });\n                    } else {\n                        frappe.msgprint(__('Material Transfer for Manufacture already created'));\n                    }\n            })\n            \n        }, 'Create');\n        \n        frm.add_custom_button(__('Create Service Job Card'), function() {\n            frappe.call({\n                callback: function() {\n                    frappe.new_doc('Service Job Card', {\n                        service_work_order: frm.doc.name\n                    });\n                }\n            });\n        }, 'Create');\n        \n        frm.add_custom_button(__('Stock Entry after Manufacture'), function() {\n            frappe.call({\n                callback: function() {\n                    if (!frm.doc.stock_entry_after_manufacture) \n                    {\n                        frappe.new_doc('Stock Entry', {\n                            stock_entry_type: 'Manufacture',\n                            from_warehouse: 'Work In Progress - VASPL',\n                            to_warehouse: frm.doc.warehouse,\n                            service_work_order: frm.doc.name,\n                            callback: function(r) {\n                                if (r.docname) \n                                {\n                                    cur_frm.set_value('stock_entry_after_manufacture', r.docname);\n                                    cur_frm.refresh_field('stock_entry_after_manufacture');\n                                    frm.set_df_property('stock_entry_after_manufacture_button', 'read_only', 1);\n                                } \n                                else \n                                {\n                                    frappe.msgprint(__('Error creating document'));\n                                }\n                            }\n                        });\n                    } else {\n                        frappe.msgprint(__('Stock Entry after Manufacture already created'));\n                    }\n                }\n            });\n        }, 'Create');\n        \n        \n        // disable the buttons if the stock entries are already created\n        if (frm.doc.material_transfer_for_manufacture) {\n            frm.set_df_property('material_transfer_for_manufacture_button', 'read_only', 1);\n        }\n        \n        if (frm.doc.stock_entry_after_manufacture) {\n            frm.set_df_property('stock_entry_after_manufacture_button', 'read_only', 1);\n        }\n        \n        \n    }\n});\n\n\n/*\n.attr('id', 'material_transfer_for_manufacture_button')\n.attr('id', 'stock_entry_after_manufacture_button')\n\n        frm.add_custom_button(__('Material Transfer for Manufacture'), function() {\n    frappe.call({\n        method: 'frappe.client.update_progress_bar',\n        args: {value: 33},\n        callback: function() {\n            frappe.new_doc('Stock Entry', {\n                stock_entry_type: 'Material Transfer for Manufacture',\n                from_warehouse: frm.doc.warehouse,\n                to_warehouse: 'Work In Progress - VASPL',\n                service_work_order: frm.doc.name\n            });\n        }\n    });\n}, 'Create');\n\nfrm.add_custom_button(__('Create Service Job Card'), function() {\n    frappe.call({\n        method: 'frappe.client.update_progress_bar',\n        args: {value: 67},\n        callback: function() {\n            frappe.new_doc('Service Job Card', {\n                service_work_order: frm.doc.name\n            });\n        }\n    });\n}, 'Create');\n\nfrm.add_custom_button(__('Stock Entry after Manufacture'), function() {\n    frappe.call({\n        method: 'myapp.my_module.update_progress_bar',\n        args: {value: 100},\n        callback: function() {\n            frappe.new_doc('Stock Entry', {\n                stock_entry_type: 'Manufacture',\n                from_warehouse: 'Work In Progress - VASPL',\n                to_warehouse: frm.doc.warehouse,\n                service_work_order: frm.doc.name\n            });\n        }\n    });\n}, 'Create');\n\n*/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Work Order",
  "enabled": 0,
  "modified": "2023-04-20 12:42:46.653170",
  "module": null,
  "name": "Script for Auto Generate Service Job Cards",
  "script": "frappe.ui.form.on('Service Work Order', {\n    refresh: function(frm) {\n        // Get the operations from the service work order\n        frappe.call({\n            method: 'get_operations',\n            doc: frm.doc,\n            callback: function(response) {\n                var operations = response.message;\n                // Create a service job card for each operation\n                for (var i = 0; i < operations.length; i++) {\n                    frappe.call({\n                        method: 'create_service_job_card',\n                        args: {\n                            operation: operations[i]\n                        },\n                        callback: function(response) {\n                            var service_job_card_name = response.message;\n                            frappe.show_alert('Service Job Card created: ' + service_job_card_name);\n                        }\n                    });\n                }\n            }\n        });\n    }\n});\n\nfrappe.ui.form.on('Service Work Order Operation', {\n    operation_add: function(frm) {\n        // If a new operation is added, refresh the form to create the service job cards\n        frm.refresh();\n    }\n});\n\n// Server-side methods\nfrappe.provide('erpnext.scripts');\n\nerpnext.scripts.get_operations = function(doc) {\n    return frappe.call({\n        method: 'erpnext.scripts.get_operations',\n        args: {\n            service_work_order: doc.name\n        }\n    });\n};\n\nerpnext.scripts.create_service_job_card = function(args) {\n    return frappe.call({\n        method: 'erpnext.scripts.create_service_job_card',\n        args: args\n    });\n};",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CA Form",
  "enabled": 0,
  "modified": "2023-04-20 12:54:52.507647",
  "module": null,
  "name": "populate same value",
  "script": "frappe.ui.form.on(\"CA Form\", \"work_order_table_work_order\", function(frm, cdt, cdn) {\n    var child_table = locals[cdt][cdn];\n    frappe.model.with_doc(\"Work Order\", child_table.work_order, function() {\n        var work_order_doc = frappe.model.get_doc(\"Work Order\", child_table.work_order);\n        $.each(work_order_doc.required_items, function(index, row) {\n            var child_row = frappe.model.add_child(child_table, \"required_items\", \"required_items\");\n            child_row.item_code = row.item_code;\n            child_row.item_name = row.item_name;\n            // add other fields as needed\n        });\n        frm.refresh_field(\"required_items\");\n    });\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Work Order",
  "enabled": 0,
  "modified": "2023-04-20 15:41:59.124982",
  "module": "Repair Management",
  "name": "Script to show Progress Bar in Service Work Order",
  "script": "frappe.ui.form.on('Service Work Order', {\r\n    \r\n    \r\n    \r\n    refresh: function(frm) {\r\n/*        \r\n        // Get references to the progress bar and its sections\r\nconst progressBar = document.getElementById('progress-bar');\r\nconst materialTransferSection = document.getElementById('material-transfer-section');\r\nconst stockEntrySection = document.getElementById('stock-entry-section');\r\n\r\n// Set the total number of steps required to complete the Service Work Order\r\nconst totalSteps = 2;\r\n\r\n// Initially, both sections of the progress bar will be empty\r\nmaterialTransferSection.classList.remove('completed');\r\nstockEntrySection.classList.remove('completed');\r\n\r\n// When the material transfer for manufacture is completed, update the progress bar\r\nfunction completeMaterialTransfer() {\r\n  materialTransferSection.classList.add('completed');\r\n  updateProgressBar();\r\n}\r\n\r\n// When the stock entry after manufacture is completed, update the progress bar\r\nfunction completeStockEntry() {\r\n  stockEntrySection.classList.add('completed');\r\n  updateProgressBar();\r\n}\r\n\r\n// Update the progress bar based on the completed sections\r\nfunction updateProgressBar() {\r\n  const completedSections = document.querySelectorAll('.completed').length;\r\n  const progressPercentage = (completedSections / totalSteps) * 100;\r\n  progressBar.style.width = `${progressPercentage}%`;\r\n}\r\n\r\n// Call the functions to update the progress bar as each step is completed\r\ncompleteMaterialTransfer();\r\ncompleteStockEntry();\r\n*/        \r\n        \r\n        // Calculate the progress of the service work order based on material transfer\r\n        var total_items = 0;\r\n        var completed_items = 0;\r\n        var material_transfers = frm.doc.material_transfers || [];\r\n\r\n        for (var i = 0; i < material_transfers.length; i++) \r\n        {\r\n            var material_transfer = material_transfers[i];\r\n\r\n            // Check if the material transfer is for manufacturing a new item\r\n            if (material_transfer.purpose === 'Material Transfer for Manufacture') \r\n            {\r\n                total_items += material_transfer.items.length;\r\n                for (var j = 0; j < material_transfer.items.length; j++) \r\n                {\r\n                    var item = material_transfer.items[j];\r\n                    if (item.transferred_qty === item.qty) \r\n                    {\r\n                        completed_items++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Check if the material transfer is for manufactured item\r\n            if (material_transfer.purpose === 'Manufacture') \r\n            {\r\n                total_items += 1;\r\n                if (material_transfer.status === 'Completed') \r\n                {\r\n                    completed_items++;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Calculate the progress percentage\r\n        var progress = Math.round((completed_items / total_items) * 100);\r\n\r\n        // Add the progress bar to the form\r\n        frm.dashboard.add_indicator(__('Progress'), progress + '%', progress < 100 ? 'orange' : 'green');\r\n        \r\n    }\r\n});\r\n\r\n/*\r\nfrappe.ui.form.on('Service Work Order', {\r\n    refresh: function(frm) {\r\n        // Calculate the progress of the service work order\r\n        var total_operations = frm.doc.service_operations.length;\r\n        var completed_operations = 0;\r\n        for (var i = 0; i < total_operations; i++) {\r\n            if (frm.doc.service_operations[i].status === 'Completed') {\r\n                completed_operations++;\r\n            }\r\n        }\r\n        var progress = Math.round((completed_operations / total_operations) * 100);\r\n\r\n        // Add the progress bar to the form\r\n        frm.dashboard.add_indicator(__('Progress'), progress + '%', progress < 100 ? 'orange' : 'green');\r\n    }\r\n});\r\n*/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CA Form",
  "enabled": 1,
  "modified": "2023-04-20 16:17:53.492542",
  "module": null,
  "name": "Fetch Child table required items in CA form",
  "script": "frappe.ui.form.on(\"CA Form\", {\n    \n   \"work_order_1\": function(frm) {\n        frm.clear_table(\"required_items\");\n        frm.refresh_field(\"required_items\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.work_order_1){\n                frappe.model.with_doc(\"Work Order\", frm.doc.work_order_1, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Work Order\", frm.doc.work_order_1);\n                      // console.log(tabletransfer1);\n                        var qty=0;\n                        $.each(tabletransfer1.required_items, function(index, row){\n                            var d = frm.add_child(\"required_items\");\n                            d.item_code = row.item_code;\n                        \n                            \n                        });\n                       \n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"required_items\");\n                frm.refresh_field(\"required_items\");\n            }\n            \n    }\n    \n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Safety Goal",
  "enabled": 1,
  "modified": "2023-04-20 13:19:48.087727",
  "module": null,
  "name": "same value populaton",
  "script": "frappe.ui.form.on('Safety Goal', {\n\tbuilding1:function(frm) {\n\t\tif(frm.doc.building1)\n\t\t\tfrm.set_value(\"department\", frm.doc.building1);\n\t}\n})\n\nfrappe.ui.form.on('Safety Goal', {\n\t\"building_on_form_rendered\": function(frm, cdt, cdn) {\n\t\tvar child_table = locals[cdt][cdn];\n\t\t$(child_table.wrapper).on(\"change\", \"input[data-fieldname='building']\", function() {\n\t\t\tvar selected_building = $(this).val();\n\t\t\tfrappe.model.set_value(child_table.doctype, child_table.name, \"department\", selected_building);\n\t\t});\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Work Order",
  "enabled": 0,
  "modified": "2023-04-21 13:32:34.664243",
  "module": null,
  "name": "test",
  "script": "frappe.ui.form.on('Service Work Order', {\n    refresh: function(frm) {\n        frm.add_custom_button(__('Material Transfer for Manufacture'), function() {\n            frappe.call({\n                method: 'vaspl_repair_management.repair_management.service_work_order.create_material_transfer',\n                args: {\n                    'service_work_order': frm.doc.name,\n                    'from_warehouse': frm.doc.warehouse,\n                    'to_warehouse': 'Work In Progress - VASPL',\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        cur_frm.set_value('material_transfer_for_manufacture', r.message);\n                        cur_frm.refresh_field('material_transfer_for_manufacture');\n                        cur_frm.disable_button(__('Material Transfer for Manufacture'));\n                    } else {\n                        frappe.msgprint(__('Error creating Material Transfer for Manufacture'));\n                    }\n                }\n            });\n        }, 'Create');\n        \n        frm.add_custom_button(__('Stock Entry after Manufacture'), function() {\n            frappe.call({\n                method: 'vaspl_repair_management.repair_management.service_work_order.create_stock_entry',\n                args: {\n                    'service_work_order': frm.doc.name,\n                    'from_warehouse': 'Work In Progress - VASPL',\n                    'to_warehouse': frm.doc.warehouse,\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        cur_frm.set_value('stock_entry_after_manufacture', r.message);\n                        cur_frm.refresh_field('stock_entry_after_manufacture');\n                        cur_frm.disable_button(__('Stock Entry after Manufacture'));\n                    } else {\n                        frappe.msgprint(__('Error creating Stock Entry after Manufacture'));\n                    }\n                }\n            });\n        }, 'Create');\n        \n        if (frm.doc.material_transfer_for_manufacture) {\n            cur_frm.disable_button(__('Material Transfer for Manufacture'));\n        }\n        \n        if (frm.doc.stock_entry_after_manufacture) {\n            cur_frm.disable_button(__('Stock Entry after Manufacture'));\n        }\n    }\n});\n\n/*\nfrappe.ui.form.on('Service Work Order', {\n\trefresh(frm) {\n\t\tfunction pageInit(type) {\n  if (type == \"view\") {\n    // Set the total number of steps required to complete the Service Work Order\n    const totalSteps = 2;\n\n    // Set the number of completed steps to zero initially\n    let completedSteps = 0;\n\n    // Get references to the Start and Finish buttons\n    const startButton = document.querySelector(\"#inpt_custevent_start_service\");\n    const finishButton = document.querySelector(\"#inpt_custevent_finish_service\");\n\n    // Add event listeners to the buttons\n    startButton.addEventListener(\"click\", completeMaterialTransfer);\n    finishButton.addEventListener(\"click\", completeStockEntry);\n\n    // When the material transfer for manufacture is completed, update the progress bar and toggle the button to Finish\n    function completeMaterialTransfer() {\n      completedSteps++;\n      updateProgressBar();\n      startButton.style.display = \"none\";\n      finishButton.style.display = \"inline-block\";\n    }\n\n    // When the stock entry after manufacture is completed, update the progress bar and hide the Finish button\n    function completeStockEntry() {\n      completedSteps++;\n      updateProgressBar();\n      finishButton.style.display = \"none\";\n    }\n\n    // Update the progress bar based on the completed sections\n    function updateProgressBar() {\n      const progressPercentage = (completedSteps / totalSteps) * 100;\n      const progressBarString = '[' + '#'.repeat(Math.floor(progressPercentage / 10)) + ' '.repeat(Math.ceil((100 - progressPercentage) / 10)) + ']';\n      console.log(progressBarString, `${progressPercentage}% Completed`);\n    }\n\n    // Show the Start button and hide the Finish button initially\n    startButton.style.display = \"inline-block\";\n    finishButton.style.display = \"none\";\n  }\n}\n\t}\n})\n*/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2023-04-21 12:58:07.597366",
  "module": "Repair Management",
  "name": "Script to remove crop image option whild uploading an image",
  "script": "frappe.ui.form.on(\"Item\", \"onload_post_render\", function(frm) {\r\n    frm.fields_dict['image'].get_image_options = function() {\r\n        return {\r\n            allow_crop: 0,\r\n            allow_rotate: 0,\r\n            allow_flip: 0,\r\n            allow_quality_change: 0,\r\n            allow_zoom: 0\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2023-04-25 17:19:16.253558",
  "module": "Repair Management",
  "name": "Load_Items_ForServiceWorkOrder",
  "script": "frappe.ui.form.on(\"Stock Entry\", {\n    \n    refresh: function(frm) {\n        if(frm.doc.items.length==0){\n        frm.clear_table(\"items\");\n        frm.refresh_field(\"items\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.service_work_order && frm.doc.stock_entry_type === \"Material Transfer for Manufacture\"){\n                \n                frappe.model.with_doc(\"Service Work Order\", frm.doc.service_work_order, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Service Work Order\", frm.doc.service_work_order);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.required_items, function(index, row){\n                            var d = frm.add_child(\"items\");\n                            \n                            d.item_code = row.item_code;\n                            d.transfer_qty = row.required_qty;\n                            d.qty = row.required_qty;\n                            d.t_warehouse = frm.doc.to_warehouse;\n                            d.s_warehouse = frm.doc.from_warehouse;\n                            d.uom = row.uom;\n                            d.conversion_factor = 1;\n                           \n                            frm.refresh_field(\"items\");\n                            \n                        });\n                    \n                });\n            }\n             else if(frm.doc.service_work_order && frm.doc.stock_entry_type === \"Manufacture\"){\n                \n                 /*frappe.model.with_doc(\"Service Work Order\", frm.doc.service_work_order, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Service Work Order\", frm.doc.service_work_order);\n                        $.each(tabletransfer1.production_items, function(index, row){\n                            var d = frm.add_child(\"items\");\n                            \n                            d.item_code = row.item_code;\n                            d.transfer_qty = row.planned_qty;\n                            d.qty = row.planned_qty;\n                            d.conversion_factor = 1;\n                            d.\n                          \n                            frm.refresh_field(\"items\");\n                            \n                        });\n                    \n                });*/\n                \n            }\n\n          \n            else  {\n                frm.clear_table(\"items\");\n                frm.refresh_field(\"items\");\n            }\n            \n    }\n    }\n    \n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "CA Form",
  "enabled": 1,
  "modified": "2023-04-24 16:38:54.389188",
  "module": null,
  "name": "Fetch details from Delivery note",
  "script": "\nfrappe.ui.form.on(\"CA Form\", {\n    \n    \"delivery_note\": function(frm) {\n        \n        frm.clear_table(\"delivery_note_table\");\n        frm.refresh_field(\"delivery_note_table\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.delivery_note){\n                \n                frappe.model.with_doc(\"Delivery Note\", frm.doc.delivery_note, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Delivery Note\", frm.doc.delivery_note);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.items, function(index, row){\n                            var d = frm.add_child(\"delivery_note_table\");\n                            d.item_code = row.item_code;\n                            d.qty = row.qty;\n                            d.uom = row.uom;\n\n                           \n                        \n                            frm.refresh_field(\"delivery_note_table\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"delivery_note_table\");\n                frm.refresh_field(\"delivery_note_table\");\n            }\n            \n    }\n    \n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-04-26 12:23:46.926204",
  "module": null,
  "name": "Fetch child table from type of work",
  "script": "frappe.ui.form.on(\"Work Order\", {\n    \n    \"type_of_work\": function(frm) {\n        \n        frm.clear_table(\"task_to_be_done1\");\n        frm.refresh_field(\"task_to_be_done1\");\n         //console.log(frm.doc.name1);\n            if(frm.doc.type_of_work){\n                \n                frappe.model.with_doc(\"Type of Work\", frm.doc.type_of_work, function() {\n                   \n                        var tabletransfer1= frappe.model.get_doc(\"Type of Work\", frm.doc.type_of_work);\n                      // console.log(tabletransfer1);\n                        $.each(tabletransfer1.task_to_be_done1, function(index, row){\n                            var d = frm.add_child(\"task_to_be_done1\");\n                            d.task_to_be_done = row.task_to_be_done;\n            \n                            frm.refresh_field(\"task_to_be_done1\");\n                            \n                        });\n                    \n                });\n            }\n            else  {\n                frm.clear_table(\"task_to_be_done1\");\n                frm.refresh_field(\"task_to_be_done1\");\n            }\n            \n    }\n    \n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 0,
  "modified": "2023-04-27 12:41:33.471048",
  "module": "Repair Management",
  "name": "Horizontal Scroll",
  "script": "frappe.ui.form.on('Quotation', {\r\n    refresh: function(frm) {\r\n        // get the items table element\r\n        var items_table = frm.fields_dict.items.$wrapper.find('.data-row table');\r\n       \r\n\r\n        // set the table layout to fixed and the width to 100%\r\n        items_table.css('table-layout', 'fixed');\r\n        items_table.css('width', '100%');\r\n\r\n        // set the width of each column in the table\r\n        var columns = items_table.find('th');\r\n        columns.each(function(index, element) {\r\n            $(element).css('width', '5%'); // set the column width to 5%\r\n        });\r\n    }\r\n});\r\n\r\n/*\r\nfrappe.ui.form.on('Quotation', {\r\n    refresh: function(frm) {\r\n        // get the items table element\r\n        var items_table = frm.fields_dict.items.$wrapper.find('.data-row table');\r\n\r\n        // set the table layout to fixed and the width to 100%\r\n        items_table.css('table-layout', 'fixed');\r\n        items_table.css('width', '100%');\r\n\r\n        // set the width of each column in the table based on the content\r\n        var columns = items_table.find('th');\r\n        columns.each(function(index, element) {\r\n            var column_index = $(element).index() + 1; // add 1 to skip the checkbox column\r\n            var max_column_width = 150; // set a maximum column width in pixels\r\n            var max_content_width = 0;\r\n\r\n            // find the widest content in the column\r\n            var rows = items_table.find('tbody tr');\r\n            rows.each(function(index, row) {\r\n                var content_width = $(row).find('td:nth-child(' + column_index + ')').width();\r\n                if (content_width > max_content_width) {\r\n                    max_content_width = content_width;\r\n                }\r\n            });\r\n\r\n            // set the column width to the minimum of the widest content or the maximum column width\r\n            var column_width = Math.min(max_column_width, max_content_width);\r\n            $(element).css('width', column_width + 'px');\r\n        });\r\n    }\r\n});\r\n*/\r\n/*\r\nfrappe.ui.form.on('Quotation', {\r\n    refresh: function(frm) {\r\n        // get the items table element\r\n        var items_table = frm.fields_dict.items.$wrapper.find('.data-row table');\r\n\r\n        // set the table layout to fixed and the width to 100%\r\n        items_table.css('table-layout', 'fixed');\r\n        items_table.css('width', '100%');\r\n\r\n        // set the tbody element to display as a block with a horizontal scroll bar\r\n        var tbody = items_table.find('tbody');\r\n        tbody.css('display', 'block');\r\n        tbody.css('overflow-x', 'auto');\r\n        tbody.css('overflow-y', 'hidden');\r\n\r\n        // set the width of each column in the table\r\n        var columns = tbody.find('tr:first-child td');\r\n        columns.each(function(index, element) {\r\n            if (index < 10) { // adjust this number to show more or fewer columns\r\n                $(element).css('width', 'auto');\r\n            } else {\r\n                $(element).css('width', '0');\r\n            }\r\n        });\r\n    }\r\n});\r\n*/\r\n/*\r\nfrappe.ui.form.on('Quotation', {\r\n    refresh: function(frm) {\r\n        // get the items table element\r\n        var items_table = frm.fields_dict.items.$wrapper.find('.data-row table');\r\n\r\n        // set the table layout to fixed and the width to 100%\r\n        items_table.css('table-layout', 'fixed');\r\n        items_table.css('width', '100%');\r\n\r\n        // set the tbody element to display as a block with a horizontal scroll bar\r\n        var tbody = items_table.find('tbody');\r\n        tbody.css('display', 'block');\r\n        tbody.css('overflow-x', 'auto');\r\n        tbody.css('overflow-y', 'hidden');\r\n        tbody.css('height', 'auto');\r\n    }\r\n});\r\n*/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 0,
  "modified": "2023-04-28 11:52:12.479598",
  "module": "Repair Management",
  "name": "Generate Unique ID for Work Order and Service Work Order",
  "script": "frappe.ui.form.on('Work Order', {\r\n    refresh: function(frm) {\r\n        if (!frm.doc.__islocal) return;\r\n        frappe.call({\r\n\t\t\tmethod: \"vaspl_repair_management.custom_methods.generate_unique_naming\",\r\n\t\t\targs: {\r\n\t\t\t\t\"doctype\": frm.doc.doctype,\r\n\t\t\t\t\"series\": \"VASPL-WO\",\r\n\t\t\t\t\"field\": \"name\",\r\n\t\t\t\t\"app\": \"vaspl_repair_management\",\r\n\t\t\t\t\"module\": \"repair_management\"\r\n\t\t\t},callback: function(r) {\r\n                if (r.message) {\r\n                    frm.set_value(\"name\", r.message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\n/*\r\nfrappe.provide(\"vaspl_repair_management\");\r\n\r\nvaspl_repair_management.generate_unique_naming = function(doc, args) {\r\n    return frappe.call({\r\n        method: \"vaspl_repair_management.custom_methods.generate_unique_naming\",\r\n        args: {\r\n            \"doctype\": doc.doctype,\r\n            \"series\": \"VASPL-WO\",\r\n            \"field\": \"name\",\r\n            \"app\": args.app,\r\n            \"module\": args.module\r\n        }\r\n    });\r\n};*/",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Work Order",
  "enabled": 0,
  "modified": "2023-04-27 17:22:44.509188",
  "module": "Repair Management",
  "name": "Generate Unique ID for Service Work Order",
  "script": "frappe.ui.form.on('Service Work Order', {\r\n    refresh: function(frm) {\r\n        if (!frm.doc.__islocal) return;\r\n        frappe.call({\r\n            method: \"generate_unique_naming\",\r\n            doc: frm.doc,\r\n            args: {\r\n                \"app\": \"vaspl_repair_management\",\r\n                \"module\": \"repair_management\"\r\n            },\r\n            callback: function(r) {\r\n                if (r.message) {\r\n                    frm.set_value(\"name\", r.message);\r\n                }\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 1,
  "modified": "2023-04-28 14:43:39.310433",
  "module": "Repair Management",
  "name": "Unshare button in File Manager",
  "script": "frappe.ui.form.on('File', {\r\n    refresh: function(frm) {\r\n        var selected_files = frm.get_checked_items();\r\n        if (selected_files.length === 0) {\r\n            // No files selected, don't show the button\r\n            return;\r\n        }\r\n        var can_unshare = true;\r\n        for (var i = 0; i < selected_files.length; i++) {\r\n            var file = selected_files[i];\r\n            if (!file.shared) {\r\n                can_unshare = false;\r\n                break;\r\n            }\r\n        }\r\n        if (!can_unshare) {\r\n            // Not all selected files are shared, don't show the button\r\n            return;\r\n        }\r\n        if (!frm.custom_actions) {\r\n            // Add a custom action to the list of actions\r\n            frm.custom_actions = {};\r\n        }\r\n        frm.custom_actions['Unshare'] = function() {\r\n            // Ask for confirmation before unsharing\r\n            frappe.confirm(__('Are you sure you want to unshare these files?'), function() {\r\n                // Unshare the selected files\r\n                for (var i = 0; i < selected_files.length; i++) {\r\n                    var file = selected_files[i];\r\n                    file.shared = 0;\r\n                }\r\n                frm.save();\r\n            });\r\n        };\r\n        frm.page.set_actions();\r\n    }\r\n});\r\n/*\r\nfrappe.ui.form.on('File', {\r\n    refresh: function(frm) {\r\n        if (frm.doc.__islocal) {\r\n            // Don't show the Unshare button for new files\r\n            return;\r\n        }\r\n        if (!frm.doc.shared) {\r\n            // Don't show the Unshare button if the file is not shared\r\n            return;\r\n        }\r\n        if (!frm.custom_buttons) {\r\n            // Add a custom button to the toolbar\r\n            frm.custom_buttons = {};\r\n        }\r\n        frm.custom_buttons['Unshare'] = {\r\n            label: __('Unshare'),\r\n            icon: 'icon-remove',\r\n            onclick: function() {\r\n                // Ask for confirmation before unsharing\r\n                frappe.confirm(__('Are you sure you want to unshare this file?'), function() {\r\n                    // Unshare the file\r\n                    frm.set_value('shared', 0);\r\n                    frm.save();\r\n                });\r\n            }\r\n        };\r\n        frm.page.set_primary_action();\r\n    }\r\n});\r\n*/\r\n\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 1,
  "modified": "2023-04-28 13:26:22.498561",
  "module": null,
  "name": "button in file manager",
  "script": "frappe.ui.form.on(\"File\", {\n    onload: function(frm) {\n        // Add the custom button\n        frm.add_custom_button(__('Unshare'), function() {\n            // Write the logic to handle the \"Unshare\" button click event\n            // You can use `frm.doc` to access the current document\n           \n            frappe.msgprint('Unshare button clicked!');\n        }, __(\"File\"));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2023-05-01 16:50:25.228822",
  "module": "Repair Management",
  "name": "Autofetch Sales Order when Work Order is created from Production Plan",
  "script": "frappe.ui.form.on('Work Order', {\r\n    onload: function(frm) {\r\n        frappe.call({\r\n            method: \"frappe.client.get\",\r\n            args: {\r\n                doctype: \"Production Plan\",\r\n                name: frm.doc.production_plan\r\n            },\r\n            callback: function(data) {\r\n                frm.set_value(\"sales_order\", data.message.sales_order);\r\n            }\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 }
]